<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[Android和iOS音频互通]]></title>
      <url>https://xiaoxionglaoshi.github.io/2016/12/01/Android%E5%92%8CiOS%E9%9F%B3%E9%A2%91%E4%BA%92%E9%80%9A/</url>
      <content type="html"><![CDATA[<p>最近项目中遇到一个问题,Android发送的音频文件在iOS端无法播放,音频格式是AMR,iOS端在将ARM格式转换成WAV格式时失败,用的是libopencore-amrnb库<br>后来发现,是Android端转换的AMR和我们这边转换的不一样,虽然后缀都是.amr,但是Android转换出来的详细信息和我们的不一样<br><a id="more"></a></p>
<p>下面是Android端需要设置的代码<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">mRecorder = new MediaRecorder();</div><div class="line">mRecorder.setAudioSource(MediaRecorder.AudioSource.MIC);</div><div class="line">mRecorder.setOutputFormat(MediaRecorder.OutputFormat.AMR_NB);</div><div class="line">mRecorder.setAudioEncoder(MediaRecorder.AudioEncoder.AMR_NB);</div><div class="line"># mRecorder.setAudioChannels(1);</div><div class="line"># mRecorder.setAudioSamplingRate(8000);</div><div class="line"># mRecorder.setAudioEncodingBitRate(64);</div></pre></td></tr></table></figure></p>
<p>1.其中setOutputFormat和setAudioEncoder中一定要设置统一都为AMR_NB<br>2.后三行一定不要写哦</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[deinit不执行的问题]]></title>
      <url>https://xiaoxionglaoshi.github.io/2016/11/25/deinit%E4%B8%8D%E6%89%A7%E8%A1%8C%E7%9A%84%E9%97%AE%E9%A2%98/</url>
      <content type="html"><![CDATA[<p>在Objective-C语法中,我们确定一个视图是否销毁可以通过dealloc方法查看,而Swift中没有此方法,不过提供deinit等同于dealloc<br><a id="more"></a><br>最近写了个demo,过程中发现视图一直不执行deinit的方法,也就是说视图没有释放,查看了一下代码,发现代码中有一处比较可以,那就是写了个protocol,相互持有无法释放</p>
<h2 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h2><p>给其中一个delegate添加weak来打破持有<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">weak</span> <span class="keyword">var</span> myDelegate: naviDelegate?</div></pre></td></tr></table></figure></p>
<p>这时候delegate就需要定义为类protocol<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">protocol</span> <span class="title">naviDelegate</span>: <span class="title">class</span> </span>&#123;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[沙盒文件操作]]></title>
      <url>https://xiaoxionglaoshi.github.io/2016/11/23/%E6%B2%99%E7%9B%92%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C/</url>
      <content type="html"><![CDATA[<p>沙盒文件主要有三个目录:<br>1.Documents<br>2.Library (Caches, Preferences)<br>3.tmp<br><a id="more"></a></p>
<h1 id="沙盒文件"><a href="#沙盒文件" class="headerlink" title="沙盒文件"></a>沙盒文件</h1><h2 id="Documents"><a href="#Documents" class="headerlink" title="Documents"></a>Documents</h2><p>苹果建议将程序中建立的或在程序中浏览到的文件数据保存在该目录下，iTunes备份和恢复的时候会包含此目录<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> homeDirectory = <span class="type">NSHomeDirectory</span>()</div><div class="line"><span class="keyword">let</span> documentPath = homeDirectory + <span class="string">"/Documents"</span></div><div class="line"><span class="keyword">let</span> documentPath2 = <span class="type">NSSearchPathForDirectoriesInDomains</span>(.documentDirectory, .userDomainMask, <span class="literal">true</span>).first</div><div class="line"><span class="built_in">print</span>(<span class="string">"documentPath: <span class="subst">\(documentPath)</span> \n documentPath2: <span class="subst">\(documentPath2)</span>"</span>)</div></pre></td></tr></table></figure></p>
<h2 id="Library"><a href="#Library" class="headerlink" title="Library"></a>Library</h2><p>这个目录下有2个子目录：Caches缓存 , Preferences偏好设置,不应该直接创建偏好设置文件而使用NSUserDefaults类<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// lib目录</span></div><div class="line"><span class="keyword">let</span> <span class="type">LibraryPath</span> = homeDirectory + <span class="string">"/Library/"</span></div><div class="line"><span class="keyword">let</span> libraryPath2 = <span class="type">NSSearchPathForDirectoriesInDomains</span>(.libraryDirectory, .userDomainMask, <span class="literal">true</span>).first</div><div class="line"><span class="built_in">print</span>(<span class="string">"LibraryPath: <span class="subst">\(LibraryPath)</span> \n LibraryPath2: <span class="subst">\(libraryPath2)</span>"</span>)</div></pre></td></tr></table></figure></p>
<p>主要存放缓存文件，iTunes不会备份此目录，此目录下文件不会在应用退出时删除<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Caches目录</span></div><div class="line"><span class="keyword">let</span> libraryCachesPath = homeDirectory + <span class="string">"/Library/Caches"</span></div><div class="line"><span class="keyword">let</span> libraryCachesPath2 = <span class="type">NSSearchPathForDirectoriesInDomains</span>(.cachesDirectory, .userDomainMask, <span class="literal">true</span>)</div><div class="line"><span class="built_in">print</span>(<span class="string">"libraryCachesPath: <span class="subst">\(libraryCachesPath)</span> \n libraryCachesPath2: <span class="subst">\(libraryCachesPath2)</span>"</span>)</div></pre></td></tr></table></figure></p>
<h2 id="tmp"><a href="#tmp" class="headerlink" title="tmp"></a>tmp</h2><p>用于存放临时文件，保持应用程序再次启动过程中不需要的信息，重启后清空<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> temp = homeDirectory + <span class="string">"/tmp"</span></div><div class="line"><span class="keyword">let</span> temp2 = <span class="type">NSTemporaryDirectory</span>()</div><div class="line"><span class="built_in">print</span>(<span class="string">"temp: <span class="subst">\(temp)</span> \n temp2: <span class="subst">\(temp2)</span>"</span>)</div></pre></td></tr></table></figure></p>
<h1 id="文件操作"><a href="#文件操作" class="headerlink" title="文件操作"></a>文件操作</h1><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> fileManager = <span class="type">FileManager</span>.<span class="keyword">default</span></div></pre></td></tr></table></figure>
<h2 id="自定义存储位置"><a href="#自定义存储位置" class="headerlink" title="自定义存储位置"></a>自定义存储位置</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> customDir = <span class="type">NSHomeDirectory</span>() + <span class="string">"/Documents/customInfo"</span></div><div class="line"><span class="keyword">do</span> &#123;</div><div class="line">    <span class="keyword">try</span> fileManager.createDirectory(atPath: customDir, withIntermediateDirectories: <span class="literal">true</span>, attributes: <span class="literal">nil</span>)</div><div class="line">&#125; <span class="keyword">catch</span> &#123;</div><div class="line">    <span class="built_in">print</span>(<span class="string">"创建文件失败: <span class="subst">\(error)</span>"</span>)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>注: withIntermediateDirectories设置为true表示中间目录不存在都会自动创建</p>
</blockquote>
<h2 id="保存文本信息到目录中"><a href="#保存文本信息到目录中" class="headerlink" title="保存文本信息到目录中"></a>保存文本信息到目录中</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> customInfo = <span class="string">"xiaozhuzhu222"</span></div><div class="line"><span class="keyword">let</span> customTxtPath = customDir + <span class="string">"/customTxt.txt"</span></div><div class="line"><span class="keyword">do</span> &#123;</div><div class="line">    <span class="keyword">try</span> customInfo.write(toFile: customTxtPath, atomically: <span class="literal">true</span>, encoding: .utf8)</div><div class="line">&#125; <span class="keyword">catch</span> &#123;</div><div class="line">    <span class="built_in">print</span>(<span class="string">"写入文本失败: <span class="subst">\(error)</span>"</span>)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="保存数组到目录中"><a href="#保存数组到目录中" class="headerlink" title="保存数组到目录中"></a>保存数组到目录中</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> customArray = [<span class="string">"OC"</span>, <span class="string">"Swift"</span>, <span class="string">"Android"</span>, <span class="string">"JAVA"</span>, <span class="string">"iOS"</span>] <span class="keyword">as</span> <span class="type">NSArray</span></div><div class="line"><span class="keyword">let</span> customArrayPath = customDir + <span class="string">"/array.plist"</span></div><div class="line">customArray.write(toFile: customArrayPath, atomically: <span class="literal">true</span>)</div></pre></td></tr></table></figure>
<h2 id="保存字典到目录"><a href="#保存字典到目录" class="headerlink" title="保存字典到目录"></a>保存字典到目录</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> customDict = [<span class="string">"name"</span>: <span class="string">"xiaoxiong"</span>, <span class="string">"age"</span>: <span class="number">18</span>] <span class="keyword">as</span> <span class="type">NSDictionary</span></div><div class="line"><span class="keyword">let</span> customDictPath = customDir + <span class="string">"/dict.plist"</span></div><div class="line">customDict.write(toFile: customDictPath, atomically: <span class="literal">true</span>)</div></pre></td></tr></table></figure>
<h2 id="保存data到目录中"><a href="#保存data到目录中" class="headerlink" title="保存data到目录中"></a>保存data到目录中</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> image = <span class="type">UIImage</span>(named: <span class="string">"sfa.png"</span>)</div><div class="line"><span class="keyword">if</span> <span class="keyword">let</span> image = image &#123;</div><div class="line">    <span class="keyword">let</span> customData = <span class="type">UIImageJPEGRepresentation</span>(image, <span class="number">0.5</span>)</div><div class="line">    <span class="keyword">do</span> &#123;</div><div class="line">        <span class="keyword">let</span> customDataPath = customDir + <span class="string">"/data.jpg"</span></div><div class="line">        <span class="keyword">let</span> dataUrl = <span class="type">URL</span>(fileURLWithPath: customDataPath)</div><div class="line">        <span class="keyword">try</span> customData?.write(to: dataUrl)</div><div class="line">    &#125; <span class="keyword">catch</span> &#123;</div><div class="line">        <span class="built_in">print</span>(<span class="string">"保存Data失败: <span class="subst">\(error)</span>"</span>)</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="判断目录是否存在"><a href="#判断目录是否存在" class="headerlink" title="判断目录是否存在"></a>判断目录是否存在</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> isExist = fileManager.fileExists(atPath: customTxtPath)</div></pre></td></tr></table></figure>
<h2 id="移动文件内容"><a href="#移动文件内容" class="headerlink" title="移动文件内容"></a>移动文件内容</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> targetPath = customDir + <span class="string">"/target.txt"</span></div><div class="line"><span class="keyword">do</span> &#123;</div><div class="line">    <span class="keyword">try</span> fileManager.moveItem(atPath: customTxtPath, toPath: targetPath)</div><div class="line">&#125; <span class="keyword">catch</span> &#123;</div><div class="line">    <span class="built_in">print</span>(<span class="string">"移动失败: <span class="subst">\(error)</span>"</span>)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="获取目录下的所有文件"><a href="#获取目录下的所有文件" class="headerlink" title="获取目录下的所有文件"></a>获取目录下的所有文件</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> fileArray = fileManager.subpaths(atPath: customDir)</div><div class="line"><span class="built_in">print</span>(<span class="string">"customInfo目录下的所有文件: <span class="subst">\(fileArray)</span>"</span>)</div></pre></td></tr></table></figure>
<h2 id="删除文件"><a href="#删除文件" class="headerlink" title="删除文件"></a>删除文件</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">do</span> &#123;</div><div class="line">    <span class="keyword">try</span> fileManager.removeItem(atPath: targetPath)</div><div class="line">&#125; <span class="keyword">catch</span> &#123;</div><div class="line">    <span class="built_in">print</span>(<span class="string">"删除文件失败: <span class="subst">\(error)</span>"</span>)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="删除目录下的所有文件"><a href="#删除目录下的所有文件" class="headerlink" title="删除目录下的所有文件"></a>删除目录下的所有文件</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">do</span> &#123;</div><div class="line">    <span class="keyword">try</span>  fileArray?.forEach(&#123; (item) <span class="keyword">in</span></div><div class="line">        <span class="keyword">try</span> fileManager.removeItem(atPath: customDir + <span class="string">"/<span class="subst">\(item)</span>"</span>)</div><div class="line">    &#125;)</div><div class="line">&#125; <span class="keyword">catch</span>  &#123;</div><div class="line">    <span class="built_in">print</span>(<span class="string">"删除失败: <span class="subst">\(error)</span>"</span>)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><a href="https://github.com/xiaoxionglaoshi/DNDocumentDemo" target="_blank" rel="external">源码下载</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Carthage安装使用]]></title>
      <url>https://xiaoxionglaoshi.github.io/2016/11/21/Carthage%E5%AE%89%E8%A3%85%E4%BD%BF%E7%94%A8/</url>
      <content type="html"><![CDATA[<p>Carthage依赖库管理工具,同cocoapods一样能够很好地管理我们的三方库资源,同时又有许多优于cocoapods的地方,越来越多的三方库开始支持Carthage集成了,目前项目开始起用Swift了,也换个依赖库管理工具,换个心情.</p>
<a id="more"></a>
<h1 id="更新Homebrew"><a href="#更新Homebrew" class="headerlink" title="更新Homebrew"></a>更新<a href="http://brew.sh/index_zh-cn.html" target="_blank" rel="external">Homebrew</a></h1><blockquote>
<p>$ brew update</p>
</blockquote>
<h1 id="安装Carthage"><a href="#安装Carthage" class="headerlink" title="安装Carthage"></a>安装Carthage</h1><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><blockquote>
<p>$ brew install carthage</p>
</blockquote>
<h2 id="查看版本"><a href="#查看版本" class="headerlink" title="查看版本"></a>查看版本</h2><blockquote>
<p>$ carthage version</p>
</blockquote>
<h2 id="升级"><a href="#升级" class="headerlink" title="升级"></a>升级</h2><blockquote>
<p>$ upgrade carthage</p>
</blockquote>
<h2 id="卸载"><a href="#卸载" class="headerlink" title="卸载"></a>卸载</h2><blockquote>
<p>$ brew uninstall carthage</p>
</blockquote>
<h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><h2 id="创建空的Cartfile"><a href="#创建空的Cartfile" class="headerlink" title="创建空的Cartfile"></a>创建空的Cartfile</h2><blockquote>
<p>touch Cartfile</p>
</blockquote>
<h2 id="打开Cartfile文件"><a href="#打开Cartfile文件" class="headerlink" title="打开Cartfile文件"></a>打开Cartfile文件</h2><blockquote>
<p>open -a Xcode Cartfile</p>
</blockquote>
<h2 id="添加依赖库"><a href="#添加依赖库" class="headerlink" title="添加依赖库"></a>添加依赖库</h2><blockquote>
<p>github “Alamofire/Alamofire” ~&gt; 4.0</p>
</blockquote>
<h2 id="安装三方库"><a href="#安装三方库" class="headerlink" title="安装三方库"></a>安装三方库</h2><blockquote>
<p>$ carthage update (指定平台安装 carthage update –platform iOS)</p>
</blockquote>
<h1 id="Xcode配置"><a href="#Xcode配置" class="headerlink" title="Xcode配置"></a>Xcode配置</h1><h2 id="添加"><a href="#添加" class="headerlink" title="添加"></a>添加</h2><p><img src="https://github.com/xiaoxionglaoshi/Home/blob/master/img/21.png?raw=true" alt="image"></p>
<h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>选择菜单Build Phases 添加新的Run Script 并添加一下命令</p>
<blockquote>
<p>/usr/local/bin/carthage copy-frameworks</p>
</blockquote>
<p>点击Input Files下面+号,添加每一个Framework条目</p>
<blockquote>
<p>$(SRCROOT)/Carthage/Build/iOS/Alamofire.framework</p>
</blockquote>
<p><img src="https://github.com/xiaoxionglaoshi/Home/blob/master/img/22.png?raw=true" alt="image"></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[图片尺寸]]></title>
      <url>https://xiaoxionglaoshi.github.io/2016/11/19/%E5%9B%BE%E7%89%87%E5%B0%BA%E5%AF%B8/</url>
      <content type="html"><![CDATA[<p>Android &amp; iOS设计尺寸规范</p>
<a id="more"></a>
<p><img src="https://github.com/xiaoxionglaoshi/Home/blob/master/img/20.png?raw=true" alt="image"></p>
<p>开发群里发现的图,拿来一用,平时自己看看</p>
<p>看不清可点击后放大  <a href="https://github.com/xiaoxionglaoshi/Home/blob/master/img/20.png?raw=true" target="_blank" rel="external">点击我</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[直播 LFLiveKit推流+ ijkplayer播放 + mac搭建直播环境]]></title>
      <url>https://xiaoxionglaoshi.github.io/2016/11/17/DNLiveDemo/</url>
      <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>通过LFLiveKit推流+ijkplayer播放的方式实现客户端简单直播,同时在mac电脑上搭建环境,通过vlc播放器在电脑上播放</p>
<a id="more"></a>
<h1 id="主要用到的技术"><a href="#主要用到的技术" class="headerlink" title="主要用到的技术"></a>主要用到的技术</h1><ul>
<li>推流: <a href="https://github.com/LaiFengiOS/LFLiveKit" target="_blank" rel="external">LFLiveKit</a></li>
<li>播放: <a href="https://github.com/Bilibili/ijkplayer" target="_blank" rel="external">ijkplayer</a> </li>
<li>服务器: nginx+rtmp+ffmpeg </li>
</ul>
<h1 id="推流"><a href="#推流" class="headerlink" title="推流"></a>推流</h1><p><a href="https://github.com/LaiFengiOS/LFLiveKit" target="_blank" rel="external">LFLiveKit</a> OC编写,使用的是HlS (HTTP Live Streaming),集成GPUImage美颜等直播常用功能,支持cocoapods导入</p>
<h2 id="LFLiveKit基本使用"><a href="#LFLiveKit基本使用" class="headerlink" title="LFLiveKit基本使用"></a>LFLiveKit基本使用</h2><p>具体用法可查看demo <a href="https://github.com/xiaoxionglaoshi/DNLiveDemo" target="_blank" rel="external">源码下载</a></p>
<h2 id="申请摄像头和麦克风访问权限"><a href="#申请摄像头和麦克风访问权限" class="headerlink" title="申请摄像头和麦克风访问权限"></a>申请摄像头和麦克风访问权限</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 请求访问摄像头</span></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">requestAccessForVideo</span><span class="params">()</span></span> -&gt; <span class="type">Void</span> &#123;</div><div class="line">    <span class="keyword">let</span> status = <span class="type">AVCaptureDevice</span>.authorizationStatus(forMediaType: <span class="type">AVMediaTypeVideo</span>);</div><div class="line">    <span class="keyword">switch</span> status  &#123;</div><div class="line">    <span class="comment">// 许可对话没有出现，发起授权许可</span></div><div class="line">    <span class="keyword">case</span> .notDetermined:</div><div class="line">        <span class="type">AVCaptureDevice</span>.requestAccess(forMediaType: <span class="type">AVMediaTypeVideo</span>, completionHandler: &#123; (granted) <span class="keyword">in</span></div><div class="line">            <span class="keyword">if</span>(granted)&#123;</div><div class="line">                <span class="type">DispatchQueue</span>.main.async &#123;</div><div class="line">                    <span class="keyword">self</span>.session.running = <span class="literal">true</span></div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;)</div><div class="line">    <span class="keyword">case</span> .authorized:<span class="comment">// 已经开启授权，可继续</span></div><div class="line">    session.running = <span class="literal">true</span></div><div class="line">    <span class="keyword">case</span> .denied: <span class="keyword">break</span><span class="comment">// 用户明确地拒绝授权，或者相机设备无法访问</span></div><div class="line">    <span class="keyword">case</span> .restricted: <span class="keyword">break</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 请求访问麦克风</span></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">requestAccessForAudio</span><span class="params">()</span></span> -&gt; <span class="type">Void</span> &#123;</div><div class="line">    <span class="keyword">let</span> status = <span class="type">AVCaptureDevice</span>.authorizationStatus(forMediaType:<span class="type">AVMediaTypeAudio</span>)</div><div class="line">    <span class="keyword">switch</span> status  &#123;</div><div class="line">    <span class="keyword">case</span> .notDetermined:<span class="comment">// 许可对话没有出现，发起授权许可</span></div><div class="line">        <span class="type">AVCaptureDevice</span>.requestAccess(forMediaType: <span class="type">AVMediaTypeAudio</span>, completionHandler: &#123; (granted) <span class="keyword">in</span></div><div class="line"></div><div class="line">        &#125;)</div><div class="line">    <span class="keyword">case</span> .authorized: <span class="keyword">break</span>;<span class="comment">// 已经开启授权，可继续</span></div><div class="line">    <span class="comment">// 用户明确地拒绝授权，或者相机设备无法访问</span></div><div class="line">    <span class="keyword">case</span> .denied: <span class="keyword">break</span></div><div class="line">    <span class="keyword">case</span> .restricted:<span class="keyword">break</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">lazy</span> <span class="keyword">var</span> session: <span class="type">LFLiveSession</span> = &#123;</div><div class="line">    <span class="keyword">let</span> audioConfiguration = <span class="type">LFLiveAudioConfiguration</span>.defaultConfiguration(<span class="keyword">for</span>: .high)</div><div class="line">    <span class="keyword">let</span> videoConfiguration = <span class="type">LFLiveVideoConfiguration</span>.defaultConfiguration(<span class="keyword">for</span>: .low3)</div><div class="line">    <span class="keyword">let</span> session = <span class="type">LFLiveSession</span>(audioConfiguration: audioConfiguration, videoConfiguration: videoConfiguration)</div><div class="line">    session?.delegate = <span class="keyword">self</span></div><div class="line">    session?.preView = <span class="keyword">self</span>.view</div><div class="line">    <span class="keyword">return</span> session!</div><div class="line">&#125;()</div></pre></td></tr></table></figure>
<h2 id="开始直播结束直播"><a href="#开始直播结束直播" class="headerlink" title="开始直播结束直播"></a>开始直播结束直播</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 开始直播</span></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">startLive</span><span class="params">()</span></span> &#123;</div><div class="line">    <span class="keyword">let</span> stream = <span class="type">LFLiveStreamInfo</span>()</div><div class="line">    stream.url = <span class="string">"rtmp://192.168.3.242:1935/rtmplive/room"</span></div><div class="line">    session.startLive(stream)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">stopLive</span><span class="params">()</span></span> -&gt; <span class="type">Void</span> &#123;</div><div class="line">    session.stopLive()</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="LFLiveSessionDelegate代理回调"><a href="#LFLiveSessionDelegate代理回调" class="headerlink" title="LFLiveSessionDelegate代理回调"></a>LFLiveSessionDelegate代理回调</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">liveSession</span><span class="params">(<span class="number">_</span> session: LFLiveSession?, debugInfo: LFLiveDebug?)</span></span> &#123;</div><div class="line">    <span class="built_in">print</span>(<span class="string">"debugInfo: <span class="subst">\(debugInfo?.currentBandwidth)</span>"</span>)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">liveSession</span><span class="params">(<span class="number">_</span> session: LFLiveSession?, errorCode: LFLiveSocketErrorCode)</span></span> &#123;</div><div class="line">    <span class="built_in">print</span>(<span class="string">"errorCode: <span class="subst">\(errorCode.rawValue)</span>"</span>)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">liveSession</span><span class="params">(<span class="number">_</span> session: LFLiveSession?, liveStateDidChange state: LFLiveState)</span></span> &#123;</div><div class="line">    <span class="built_in">print</span>(<span class="string">"liveStateDidChange: <span class="subst">\(state.rawValue)</span>"</span>)</div><div class="line">    <span class="keyword">switch</span> state &#123;</div><div class="line">    <span class="keyword">case</span> <span class="type">LFLiveState</span>.ready:</div><div class="line">        stateLabel.text = <span class="string">"未连接"</span></div><div class="line">    <span class="keyword">case</span> <span class="type">LFLiveState</span>.pending:</div><div class="line">        stateLabel.text = <span class="string">"连接中"</span></div><div class="line">    <span class="keyword">case</span> <span class="type">LFLiveState</span>.start:</div><div class="line">        stateLabel.text = <span class="string">"已连接"</span></div><div class="line">    <span class="keyword">case</span> <span class="type">LFLiveState</span>.error:</div><div class="line">        stateLabel.text = <span class="string">"连接错误"</span></div><div class="line">    <span class="keyword">case</span> <span class="type">LFLiveState</span>.stop:</div><div class="line">        stateLabel.text = <span class="string">"未连接"</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="播放"><a href="#播放" class="headerlink" title="播放"></a>播放</h1><p><a href="https://github.com/Bilibili/ijkplayer" target="_blank" rel="external">ijkplayer</a>: 基于FFmpeg的跨平台播放器</p>
<h1 id="服务端"><a href="#服务端" class="headerlink" title="服务端"></a>服务端</h1><p>nginx+rtmp+ffmpeg</p>
<h2 id="安装Homebrew"><a href="#安装Homebrew" class="headerlink" title="安装Homebrew"></a>安装Homebrew</h2><p>查询是否安装Homebrew </p>
<blockquote>
<p>$ man brew</p>
</blockquote>
<p>如果安装输入q退出编辑</p>
<h2 id="安装nginx"><a href="#安装nginx" class="headerlink" title="安装nginx"></a>安装nginx</h2><blockquote>
<p>$ brew tap homebrew/nginx<br>$ brew install nginx-full –with-rtmp-module<br>$ nginx<br>$ brew info nginx-full</p>
</blockquote>
<p>1.查看如图所示路径<br><img src="https://github.com/xiaoxionglaoshi/Home/blob/master/img/18.png?raw=true" alt="image"></p>
<p>2.输入命令进入该路径</p>
<blockquote>
<p>$ vim /usr/local/etc/nginx/nginx.conf</p>
</blockquote>
<p>在文件最后添加如下代码<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">rtmp &#123;</div><div class="line">    server &#123;</div><div class="line">        listen <span class="number">1935</span>;</div><div class="line">        application rtmplive &#123;</div><div class="line">            live on;</div><div class="line">            record off;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><img src="https://github.com/xiaoxionglaoshi/Home/blob/master/img/19.png?raw=true" alt="image"></p>
<p>3.重启nginx</p>
<blockquote>
<p>$ /usr/local/Cellar/nginx-full/1.10.2/bin/nginx -s reload</p>
</blockquote>
<p>注:该命令中的1.10.2改成自己的版本号</p>
<h2 id="安装ffmpeg"><a href="#安装ffmpeg" class="headerlink" title="安装ffmpeg"></a>安装ffmpeg</h2><blockquote>
<p>$ brew install ffmpeg</p>
</blockquote>
<p>耐心等待即可</p>
<blockquote>
<p>将项目中的推流地址改成rtmp://192.168.3.242:1935/rtmplive/room<br>其中的192.168.3.242为你电脑的网络ip,修改后,手机和电脑连接同一网络即可测试直播效果<br>为了查看直播是否被推送过来,可下载支持rtmp协议的视频播放器<a href="https://www.baidu.com/s?wd=vlc&amp;rsv_spt=1&amp;rsv_iqid=0x95404b640000f780&amp;issp=1&amp;f=8&amp;rsv_bp=0&amp;rsv_idx=2&amp;ie=utf-8&amp;tn=baiduhome_pg&amp;rsv_enter=1&amp;rsv_sug2=0&amp;inputT=642&amp;rsv_sug4=1378" target="_blank" rel="external">VLC</a><br>打开VCL 选择菜单File - Open Network 输入直播流地址即可</p>
</blockquote>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[二维码扫描识别生成]]></title>
      <url>https://xiaoxionglaoshi.github.io/2016/11/16/%E4%BA%8C%E7%BB%B4%E7%A0%81%E6%89%AB%E6%8F%8F%E8%AF%86%E5%88%AB%E7%94%9F%E6%88%90/</url>
      <content type="html"><![CDATA[<p>系统api实现二维码的扫描,识别,生成<br><a id="more"></a></p>
<h1 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h1><p>需要配置文件权限</p>
<blockquote>
<p>Privacy - Camera Usage Description<br>Privacy - Camera Usage Description</p>
</blockquote>
<p>导入头文件<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> AVFoundation</div></pre></td></tr></table></figure></p>
<h1 id="二维码扫描"><a href="#二维码扫描" class="headerlink" title="二维码扫描"></a>二维码扫描</h1><h2 id="定义摄像头"><a href="#定义摄像头" class="headerlink" title="定义摄像头"></a>定义摄像头</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> session: <span class="type">AVCaptureSession</span>!</div><div class="line"><span class="keyword">var</span> layer: <span class="type">AVCaptureVideoPreviewLayer</span>!</div></pre></td></tr></table></figure>
<h2 id="设置摄像头"><a href="#设置摄像头" class="headerlink" title="设置摄像头"></a>设置摄像头</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">setupScanSession</span><span class="params">()</span></span> &#123;</div><div class="line">    <span class="comment">// 获取摄像设备</span></div><div class="line">    <span class="keyword">let</span> device = <span class="type">AVCaptureDevice</span>.defaultDevice(withMediaType: <span class="type">AVMediaTypeVideo</span>)</div><div class="line">    <span class="comment">// 看看有没有可用摄像头,一般可能被用户取消授权需主动去设置界面开启</span></div><div class="line">    <span class="keyword">guard</span> device != <span class="literal">nil</span> <span class="keyword">else</span> &#123;</div><div class="line">        <span class="keyword">let</span> alertView = <span class="type">UIAlertView</span>(title: <span class="string">"提示"</span>, message: <span class="string">"没有发现可用摄像设备"</span>, delegate: <span class="keyword">self</span>, cancelButtonTitle: <span class="string">"确定"</span>)</div><div class="line">        alertView.show()</div><div class="line">        <span class="keyword">return</span></div><div class="line">    &#125;</div><div class="line">    <span class="comment">// 初始化链接对象</span></div><div class="line">    session = <span class="type">AVCaptureSession</span>()</div><div class="line">    <span class="keyword">let</span> input: <span class="type">AVCaptureDeviceInput</span>?</div><div class="line">    <span class="keyword">do</span> &#123;</div><div class="line">        input = <span class="keyword">try</span> <span class="type">AVCaptureDeviceInput</span>.<span class="keyword">init</span>(device: device)</div><div class="line">    &#125; <span class="keyword">catch</span> &#123;</div><div class="line">        <span class="built_in">print</span>(<span class="string">"输入流出问题了:<span class="subst">\(error)</span>"</span>)</div><div class="line">        <span class="keyword">return</span></div><div class="line">    &#125;</div><div class="line">    <span class="comment">// 设置会话的输入设备</span></div><div class="line">    <span class="keyword">if</span> session.canAddInput(input) &#123;</div><div class="line">        session.addInput(input)</div><div class="line">    &#125;</div><div class="line">    <span class="comment">// 创建输出流</span></div><div class="line">    <span class="keyword">let</span> output = <span class="type">AVCaptureMetadataOutput</span>()</div><div class="line">    <span class="comment">// 设置代理, 在主线程里刷新</span></div><div class="line">    output.setMetadataObjectsDelegate(<span class="keyword">self</span>, queue: <span class="type">DispatchQueue</span>.main)</div><div class="line">    <span class="comment">// 设置高质量采集率</span></div><div class="line">    session.canSetSessionPreset(<span class="type">AVCaptureSessionPresetHigh</span>)</div><div class="line">    <span class="keyword">if</span> session.canAddOutput(output) &#123;</div><div class="line">        session.addOutput(output)</div><div class="line">    &#125;</div><div class="line">    <span class="comment">// 设置扫码支持的编码格式 (条形码和二维码)</span></div><div class="line">    output.metadataObjectTypes = [<span class="type">AVMetadataObjectTypeQRCode</span>,<span class="type">AVMetadataObjectTypeEAN13Code</span>, <span class="type">AVMetadataObjectTypeEAN8Code</span>, <span class="type">AVMetadataObjectTypeCode128Code</span>]</div><div class="line">    layer = <span class="type">AVCaptureVideoPreviewLayer</span>(session: session)</div><div class="line">    layer.videoGravity = <span class="type">AVLayerVideoGravityResizeAspectFill</span></div><div class="line">    <span class="comment">// 设置相机扫描框大小</span></div><div class="line">    layer.frame = <span class="type">CGRect</span>(x: <span class="number">10</span>, y: <span class="number">100</span>, width: <span class="number">300</span>, height: <span class="number">300</span>)</div><div class="line">    <span class="keyword">self</span>.view.layer.insertSublayer(layer, at: <span class="number">0</span>)</div><div class="line">    <span class="comment">// 开始扫描</span></div><div class="line">    startScan()</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="开始扫描"><a href="#开始扫描" class="headerlink" title="开始扫描"></a>开始扫描</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">fileprivate <span class="function"><span class="keyword">func</span> <span class="title">startScan</span><span class="params">()</span></span> &#123;</div><div class="line">    <span class="keyword">guard</span> <span class="keyword">let</span> session = session <span class="keyword">else</span> &#123; <span class="keyword">return</span> &#125;</div><div class="line">    <span class="keyword">if</span> !session.isRunning &#123;</div><div class="line">        session.startRunning()</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="扫码捕捉完成"><a href="#扫码捕捉完成" class="headerlink" title="扫码捕捉完成"></a>扫码捕捉完成</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//扫描捕捉完成</span></div><div class="line"><span class="class"><span class="keyword">extension</span> <span class="title">ScanQRViewController</span> : <span class="title">AVCaptureMetadataOutputObjectsDelegate</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">captureOutput</span><span class="params">(<span class="number">_</span> captureOutput: AVCaptureOutput!, didOutputMetadataObjects metadataObjects: [Any]!, from connection: AVCaptureConnection!)</span></span> &#123;</div><div class="line">        <span class="comment">// 停止扫码</span></div><div class="line">        session.stopRunning()</div><div class="line">        <span class="comment">// 开始对信息解读</span></div><div class="line">        <span class="keyword">var</span> <span class="type">QRCodeMessage</span> = <span class="string">""</span></div><div class="line">        <span class="keyword">for</span> metaData <span class="keyword">in</span> metadataObjects &#123;</div><div class="line">            <span class="keyword">if</span> (metaData <span class="keyword">as</span>? <span class="type">AVMetadataObject</span>)?.type == <span class="type">AVMetadataObjectTypeQRCode</span> &#123;</div><div class="line">                <span class="type">QRCodeMessage</span> = ((metaData <span class="keyword">as</span>? <span class="type">AVMetadataMachineReadableCodeObject</span>)?.stringValue)!</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">print</span>(<span class="string">"扫码结果<span class="subst">\(QRCodeMessage)</span>"</span>)</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="二维码识别"><a href="#二维码识别" class="headerlink" title="二维码识别"></a>二维码识别</h1><h2 id="UIImage扩展类实现"><a href="#UIImage扩展类实现" class="headerlink" title="UIImage扩展类实现"></a>UIImage扩展类实现</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">extension</span> <span class="title">UIImage</span> </span>&#123;</div><div class="line">    <span class="comment">/**</span></div><div class="line">    1.识别图片二维码</div><div class="line">    - returns: 二维码内容</div><div class="line">    */</div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">recognizeQRCode</span><span class="params">()</span></span> -&gt; <span class="type">String</span>? &#123;</div><div class="line">        <span class="keyword">let</span> detector = <span class="type">CIDetector</span>(ofType: <span class="type">CIDetectorTypeQRCode</span>, context: <span class="literal">nil</span>, options: [<span class="type">CIDetectorAccuracy</span> : <span class="type">CIDetectorAccuracyHigh</span>])</div><div class="line">        <span class="keyword">let</span> features = detector?.features(<span class="keyword">in</span>: <span class="type">CoreImage</span>.<span class="type">CIImage</span>(cgImage: <span class="keyword">self</span>.cgImage!))</div><div class="line">        <span class="keyword">guard</span> (features?.<span class="built_in">count</span>)! &gt; <span class="number">0</span> <span class="keyword">else</span> &#123; <span class="keyword">return</span> <span class="literal">nil</span> &#125;</div><div class="line">        <span class="keyword">let</span> feature = features?.first <span class="keyword">as</span>? <span class="type">CIQRCodeFeature</span></div><div class="line">        <span class="keyword">return</span> feature?.messageString</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="调用"><a href="#调用" class="headerlink" title="调用"></a>调用</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> image = <span class="type">UIImage</span>(named: <span class="string">"qrimage"</span>)</div><div class="line"><span class="type">DispatchQueue</span>.global().async &#123;</div><div class="line">    <span class="keyword">let</span> recognizeResult = image?.recognizeQRCode()</div><div class="line">    <span class="keyword">let</span> result = (recognizeResult?.characters.<span class="built_in">count</span>)! &gt; <span class="number">0</span> ? recognizeResult : <span class="string">"无法识别"</span></div><div class="line">    <span class="built_in">print</span>(result)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="二维码生成"><a href="#二维码生成" class="headerlink" title="二维码生成"></a>二维码生成</h1><h2 id="String扩展"><a href="#String扩展" class="headerlink" title="String扩展"></a>String扩展</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">extension</span> <span class="title">String</span> </span>&#123;</div><div class="line">    <span class="comment">/**</span></div><div class="line">    生成二维码</div><div class="line"></div><div class="line">    - parameter size:            大小</div><div class="line">    - parameter color:           颜色</div><div class="line">    - parameter bgColor:         背景颜色</div><div class="line">    - parameter logo:            图标</div><div class="line">    - parameter radius:          圆角</div><div class="line">    - parameter borderLineWidth: 线宽</div><div class="line">    - parameter borderLineColor: 线颜色</div><div class="line">    - parameter boderWidth:      带宽</div><div class="line">    - parameter borderColor:     带颜色</div><div class="line"></div><div class="line">    - returns: 自定义二维码</div><div class="line">    */</div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">generateQRCode</span><span class="params">(size:CGFloat?,color:UIColor?,bgColor:UIColor?,logo:UIImage?,radius:CGFloat,borderLineWidth:CGFloat?,borderLineColor:UIColor?,boderWidth:CGFloat?,borderColor:UIColor?)</span></span> -&gt; <span class="type">UIImage</span> &#123;</div><div class="line"></div><div class="line">        <span class="keyword">let</span> ciImage = generateCIImage(size: size, color: color, bgColor: bgColor)</div><div class="line">        <span class="keyword">let</span> image = <span class="type">UIImage</span>(ciImage: ciImage)</div><div class="line"></div><div class="line">        <span class="keyword">guard</span> <span class="keyword">let</span> <span class="type">QRCodeLogo</span> = logo <span class="keyword">else</span> &#123; <span class="keyword">return</span> image &#125;</div><div class="line"></div><div class="line">        <span class="keyword">let</span> logoWidth = image.size.width/<span class="number">4</span></div><div class="line">        <span class="keyword">let</span> logoFrame = <span class="type">CGRect</span>(x: (image.size.width - logoWidth) /  <span class="number">2</span>, y: (image.size.width - logoWidth) / <span class="number">2</span>, width: logoWidth, height: logoWidth)</div><div class="line"></div><div class="line">        <span class="comment">// 绘制logo</span></div><div class="line">        <span class="type">UIGraphicsBeginImageContextWithOptions</span>(image.size, <span class="literal">false</span>, <span class="type">UIScreen</span>.main.scale)</div><div class="line">        image.draw(<span class="keyword">in</span>: <span class="type">CGRect</span>(x: <span class="number">0</span>, y: <span class="number">0</span>, width: image.size.width, height: image.size.height))</div><div class="line"></div><div class="line">        <span class="comment">// 线框</span></div><div class="line">        <span class="keyword">let</span> logoBorderLineImagae = <span class="type">QRCodeLogo</span>.getRoundRectImage(size: logoWidth, radius: radius, borderWidth: borderLineWidth, borderColor: borderLineColor)</div><div class="line">        <span class="comment">// 边框</span></div><div class="line">        <span class="keyword">let</span> logoBorderImagae = logoBorderLineImagae.getRoundRectImage(size: logoWidth, radius: radius, borderWidth: boderWidth, borderColor: borderColor)</div><div class="line"></div><div class="line">        logoBorderImagae.draw(<span class="keyword">in</span>: logoFrame)</div><div class="line"></div><div class="line">        <span class="keyword">let</span> <span class="type">QRCodeImage</span> = <span class="type">UIGraphicsGetImageFromCurrentImageContext</span>()</div><div class="line">        <span class="type">UIGraphicsEndImageContext</span>()</div><div class="line">        <span class="keyword">return</span> <span class="type">QRCodeImage</span>!</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">    生成CIImage</div><div class="line"></div><div class="line">    - parameter size:    大小</div><div class="line">    - parameter color:   颜色</div><div class="line">    - parameter bgColor: 背景颜色</div><div class="line"></div><div class="line">    - returns: CIImage</div><div class="line">    */</div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">generateCIImage</span><span class="params">(size:CGFloat?,color:UIColor?,bgColor:UIColor?)</span></span> -&gt; <span class="type">CIImage</span> &#123;</div><div class="line"></div><div class="line">        <span class="comment">// 1.缺省值</span></div><div class="line">        <span class="keyword">var</span> <span class="type">QRCodeSize</span> : <span class="type">CGFloat</span> = <span class="number">300</span><span class="comment">//默认300</span></div><div class="line">        <span class="keyword">var</span> <span class="type">QRCodeColor</span> = <span class="type">UIColor</span>.black<span class="comment">//默认黑色二维码</span></div><div class="line">        <span class="keyword">var</span> <span class="type">QRCodeBgColor</span> = <span class="type">UIColor</span>.white<span class="comment">//默认白色背景</span></div><div class="line"></div><div class="line">        <span class="keyword">if</span> <span class="keyword">let</span> size = size &#123; <span class="type">QRCodeSize</span> = size &#125;</div><div class="line">        <span class="keyword">if</span> <span class="keyword">let</span> color = color &#123; <span class="type">QRCodeColor</span> = color &#125;</div><div class="line">        <span class="keyword">if</span> <span class="keyword">let</span> bgColor = bgColor &#123; <span class="type">QRCodeBgColor</span> = bgColor &#125;</div><div class="line"></div><div class="line">        <span class="comment">// 2.二维码滤镜</span></div><div class="line">        <span class="keyword">let</span> contentData = <span class="keyword">self</span>.data(using: <span class="type">String</span>.<span class="type">Encoding</span>.utf8)</div><div class="line">        <span class="keyword">let</span> fileter = <span class="type">CIFilter</span>(name: <span class="string">"CIQRCodeGenerator"</span>)</div><div class="line"></div><div class="line">        fileter?.setValue(contentData, forKey: <span class="string">"inputMessage"</span>)</div><div class="line">        fileter?.setValue(<span class="string">"H"</span>, forKey: <span class="string">"inputCorrectionLevel"</span>)</div><div class="line"></div><div class="line">        <span class="keyword">let</span> ciImage = fileter?.outputImage</div><div class="line"></div><div class="line">        <span class="comment">// 3.颜色滤镜</span></div><div class="line">        <span class="keyword">let</span> colorFilter = <span class="type">CIFilter</span>(name: <span class="string">"CIFalseColor"</span>)</div><div class="line">        colorFilter?.setValue(ciImage, forKey: <span class="string">"inputImage"</span>)</div><div class="line">        colorFilter?.setValue(<span class="type">CIColor</span>(cgColor: <span class="type">QRCodeColor</span>.cgColor), forKey: <span class="string">"inputColor0"</span>)<span class="comment">// 二维码颜色</span></div><div class="line">        colorFilter?.setValue(<span class="type">CIColor</span>(cgColor: <span class="type">QRCodeBgColor</span>.cgColor), forKey: <span class="string">"inputColor1"</span>)<span class="comment">// 背景色</span></div><div class="line"></div><div class="line">        <span class="comment">// 4.生成处理</span></div><div class="line">        <span class="keyword">let</span> outImage = colorFilter!.outputImage</div><div class="line">        <span class="keyword">let</span> scale = <span class="type">QRCodeSize</span> / outImage!.extent.size.width;</div><div class="line">        <span class="keyword">let</span> transform = <span class="type">CGAffineTransform</span>(scaleX: scale, y: scale)</div><div class="line">        <span class="keyword">let</span> transformImage = colorFilter!.outputImage!.applying(transform)</div><div class="line">        <span class="keyword">return</span> transformImage</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="UIImage扩展类"><a href="#UIImage扩展类" class="headerlink" title="UIImage扩展类"></a>UIImage扩展类</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">extension</span> <span class="title">UIImage</span> </span>&#123;</div><div class="line">    <span class="comment">// 获取圆角图片</span></div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">getRoundRectImage</span><span class="params">(size:CGFloat,radius:CGFloat)</span></span> -&gt; <span class="type">UIImage</span> &#123;</div><div class="line">        <span class="keyword">return</span> getRoundRectImage(size: size, radius: radius, borderWidth: <span class="literal">nil</span>, borderColor: <span class="literal">nil</span>)</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 获取圆角图片(带边框)</span></div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">getRoundRectImage</span><span class="params">(size:CGFloat,radius:CGFloat,borderWidth:CGFloat?,borderColor:UIColor?)</span></span> -&gt; <span class="type">UIImage</span> &#123;</div><div class="line">        <span class="keyword">let</span> scale = <span class="keyword">self</span>.size.width / size ;</div><div class="line"></div><div class="line">        <span class="comment">// 初始值</span></div><div class="line">        <span class="keyword">var</span> defaultBorderWidth : <span class="type">CGFloat</span> = <span class="number">0</span></div><div class="line">        <span class="keyword">var</span> defaultBorderColor = <span class="type">UIColor</span>.clear</div><div class="line"></div><div class="line">        <span class="keyword">if</span> <span class="keyword">let</span> borderWidth = borderWidth &#123; defaultBorderWidth = borderWidth * scale &#125;</div><div class="line">        <span class="keyword">if</span> <span class="keyword">let</span> borderColor = borderColor &#123; defaultBorderColor = borderColor &#125;</div><div class="line"></div><div class="line">        <span class="keyword">let</span> radius = radius * scale</div><div class="line">        <span class="keyword">let</span> react = <span class="type">CGRect</span>(x: defaultBorderWidth, y: defaultBorderWidth, width: <span class="keyword">self</span>.size.width - <span class="number">2</span> * defaultBorderWidth, height: <span class="keyword">self</span>.size.height - <span class="number">2</span> * defaultBorderWidth)</div><div class="line"></div><div class="line">        <span class="comment">// 绘制图片设置</span></div><div class="line">        <span class="type">UIGraphicsBeginImageContextWithOptions</span>(<span class="keyword">self</span>.size, <span class="literal">false</span>, <span class="type">UIScreen</span>.main.scale)</div><div class="line">        <span class="keyword">let</span> path = <span class="type">UIBezierPath</span>(roundedRect:react , cornerRadius: radius)</div><div class="line"></div><div class="line">        <span class="comment">// 绘制边框</span></div><div class="line">        path.lineWidth = defaultBorderWidth</div><div class="line">        defaultBorderColor.setStroke()</div><div class="line">        path.stroke()</div><div class="line">        path.addClip()</div><div class="line"></div><div class="line">        <span class="comment">// 画图片</span></div><div class="line">        draw(<span class="keyword">in</span>: react)</div><div class="line">        <span class="keyword">let</span> newImage = <span class="type">UIGraphicsGetImageFromCurrentImageContext</span>()</div><div class="line">        <span class="type">UIGraphicsEndImageContext</span>()</div><div class="line">        <span class="keyword">return</span> newImage!;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> url = <span class="string">"http://www.baidu.com"</span></div><div class="line"><span class="keyword">let</span> image = url.generateQRCode()</div></pre></td></tr></table></figure>
<p><a href="https://github.com/xiaoxionglaoshi/DNQrCodeScanning" target="_blank" rel="external">源码下载</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[iOS10新特性之语音识别]]></title>
      <url>https://xiaoxionglaoshi.github.io/2016/11/15/iOS10%E6%96%B0%E7%89%B9%E6%80%A7%E4%B9%8B%E8%AF%AD%E9%9F%B3%E8%AF%86%E5%88%AB/</url>
      <content type="html"><![CDATA[<p>SpeechRecognition简介<br>iOS10引入了一个新的API: Speech.framework,语音识别功能,可以执行语音转录实时和记录音频,有了这个,妈妈再也不用担心我语音识别了,告别科大讯飞也不远了吧.</p>
<a id="more"></a>
<h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>在使用系统提供的功能时需要在plist文件中配置权限,这里需要两个权限:语音识别,麦克风</p>
<blockquote>
<p>Privacy - Microphone Usage Description<br>Privacy - Speech Recognition Usage Description</p>
</blockquote>
<p><img src="https://github.com/xiaoxionglaoshi/Home/blob/master/img/16.png?raw=true" alt="image"><br>用户启动后会显示的授权界面<br><img src="https://github.com/xiaoxionglaoshi/Home/blob/master/img/17.png?raw=true" alt="image"></p>
<h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><h3 id="定义用到的属性"><a href="#定义用到的属性" class="headerlink" title="定义用到的属性"></a>定义用到的属性</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> <span class="keyword">var</span> audioEngine: <span class="type">AVAudioEngine</span>!</div><div class="line"><span class="keyword">private</span> <span class="keyword">var</span> speechRecognizer: <span class="type">SFSpeechRecognizer</span>!</div><div class="line"><span class="keyword">private</span> <span class="keyword">var</span> speechRequest: <span class="type">SFSpeechAudioBufferRecognitionRequest</span>!</div><div class="line"><span class="keyword">private</span> <span class="keyword">var</span> currentSpeechTask: <span class="type">SFSpeechRecognitionTask</span>!</div></pre></td></tr></table></figure>
<h3 id="初始化授权"><a href="#初始化授权" class="headerlink" title="初始化授权"></a>初始化授权</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">self</span>.audioEngine = <span class="type">AVAudioEngine</span>()</div><div class="line"><span class="keyword">self</span>.speechRecognizer = <span class="type">SFSpeechRecognizer</span>()</div><div class="line"><span class="keyword">self</span>.micButton.isEnabled = <span class="literal">false</span>;</div><div class="line"><span class="type">SFSpeechRecognizer</span>.requestAuthorization &#123; (status) <span class="keyword">in</span></div><div class="line">    <span class="keyword">guard</span> status == .authorized <span class="keyword">else</span> &#123;<span class="comment">// 用户授权判断</span></div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">// 初始化语音处理器的输入模式</span></div><div class="line">    <span class="keyword">let</span> myFormat = <span class="keyword">self</span>.audioEngine.inputNode?.outputFormat(forBus: <span class="number">0</span>)</div><div class="line">    <span class="keyword">self</span>.audioEngine.inputNode?.installTap(onBus: <span class="number">0</span>, bufferSize: <span class="number">1024</span>, format: myFormat, block: &#123; (buffer, time) <span class="keyword">in</span></div><div class="line">        <span class="comment">// 为语音识别请求对象添加一个AudioPCMBuffer，来获取声音数据</span></div><div class="line">        <span class="keyword">self</span>.speechRequest.append(buffer)</div><div class="line">    &#125;)</div><div class="line">    <span class="comment">// 语音处理器准备就绪（会为一些audioEngine启动时所必须的资源开辟内存）</span></div><div class="line">    <span class="keyword">self</span>.audioEngine.prepare()</div><div class="line"></div><div class="line">    <span class="keyword">self</span>.micButton.isEnabled = <span class="literal">true</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="开始录制"><a href="#开始录制" class="headerlink" title="开始录制"></a>开始录制</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">startDictating</span><span class="params">()</span></span> &#123;</div><div class="line">    <span class="keyword">do</span> &#123;</div><div class="line">        <span class="comment">// 启动声音处理器</span></div><div class="line">        <span class="keyword">try</span> <span class="keyword">self</span>.audioEngine.start()</div><div class="line">        <span class="comment">// 初始化</span></div><div class="line">        <span class="keyword">self</span>.speechRequest = <span class="type">SFSpeechAudioBufferRecognitionRequest</span>()</div><div class="line">        <span class="comment">// 使用speechRequest请求进行识别</span></div><div class="line">        <span class="keyword">self</span>.currentSpeechTask = <span class="keyword">self</span>.speechRecognizer.recognitionTask(with: <span class="keyword">self</span>.speechRequest, resultHandler: &#123; (result, error) <span class="keyword">in</span></div><div class="line">            <span class="comment">// 识别结果</span></div><div class="line">            <span class="keyword">guard</span> result != <span class="literal">nil</span> <span class="keyword">else</span> &#123;</div><div class="line">                <span class="keyword">return</span></div><div class="line">            &#125;</div><div class="line">        <span class="keyword">self</span>.contentLabel.text = result?.bestTranscription.formattedString;</div><div class="line">        &#125;)</div><div class="line"></div><div class="line">    &#125; <span class="keyword">catch</span> &#123;</div><div class="line">        <span class="built_in">print</span>(<span class="string">"开启失败: <span class="subst">\(error)</span>"</span>)</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="停止录制"><a href="#停止录制" class="headerlink" title="停止录制"></a>停止录制</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">stopDictating</span><span class="params">()</span></span> &#123;</div><div class="line">    <span class="keyword">self</span>.audioEngine.stop()</div><div class="line">    <span class="keyword">self</span>.speechRequest.endAudio()</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="UI"><a href="#UI" class="headerlink" title="UI"></a>UI</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@IBAction</span> <span class="function"><span class="keyword">func</span> <span class="title">micBtnClick</span><span class="params">(<span class="number">_</span> sender: UIButton)</span></span> &#123;</div><div class="line">    <span class="keyword">if</span> <span class="keyword">self</span>.currentSpeechTask.state == .running &#123;</div><div class="line">        <span class="keyword">self</span>.micButton.setTitle(<span class="string">"开始"</span>, <span class="keyword">for</span>: .normal)</div><div class="line">        <span class="comment">// 停止语音识别</span></div><div class="line">        <span class="keyword">self</span>.stopDictating()</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="keyword">self</span>.micButton.setTitle(<span class="string">"停止"</span>, <span class="keyword">for</span>: .normal)</div><div class="line">        <span class="keyword">self</span>.contentLabel.text = <span class="string">"等待识别"</span></div><div class="line">        <span class="comment">// 开始语音识别</span></div><div class="line">        <span class="keyword">self</span>.startDictating()</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><a href="https://github.com/xiaoxionglaoshi/DNSpeechRecognition" target="_blank" rel="external">源码下载</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Alamofire网络请求库的使用]]></title>
      <url>https://xiaoxionglaoshi.github.io/2016/11/11/Alamofire%E7%BD%91%E8%B7%AF%E8%AF%B7%E6%B1%82%E5%BA%93%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
      <content type="html"><![CDATA[<p><a href="https://github.com/Alamofire/Alamofire" target="_blank" rel="external">Alamofire</a>是目前星星最多的Swift网络请求库,作者和著名的<a href="https://github.com/AFNetworking/AFNetworking" target="_blank" rel="external">AFNetworking</a>是一个人,接下来介绍一下具体使用方法<br><a id="more"></a></p>
<h1 id="准备和介绍"><a href="#准备和介绍" class="headerlink" title="准备和介绍"></a>准备和介绍</h1><h2 id="支持版本"><a href="#支持版本" class="headerlink" title="支持版本"></a>支持版本</h2><blockquote>
<p>iOS 9.0+ / macOS 10.11+ / tvOS 9.0+ / watchOS 2.0+<br>Xcode 8.0+<br>Swift 3.0+</p>
</blockquote>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>我们通常直接用cocoapods安装,省时省力,cocoapods使用可以看<a href="https://xiaoxionglaoshi.github.io/2016/10/21/cocoapods%E4%BD%BF%E7%94%A8/">上一篇</a>文章</p>
<blockquote>
<p>source ‘<a href="https://github.com/CocoaPods/Specs.git" target="_blank" rel="external">https://github.com/CocoaPods/Specs.git</a>‘<br>platform :ios, ‘10.0’<br>use_frameworks!</p>
<p>target ‘<your target="" name="">‘ do<br>pod ‘Alamofire’, ‘~&gt; 4.0’<br>end</your></p>
</blockquote>
<h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><h2 id="发送请求"><a href="#发送请求" class="headerlink" title="发送请求"></a>发送请求</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> Alamofire</div><div class="line"><span class="type">Alamofire</span>.request(<span class="string">"https://httpbin.org/get"</span>)</div></pre></td></tr></table></figure>
<h2 id="请求响应"><a href="#请求响应" class="headerlink" title="请求响应"></a>请求响应</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="type">Alamofire</span>.request(<span class="string">"https://httpbin.org/get"</span>).responseJSON &#123; (response) <span class="keyword">in</span></div><div class="line">    <span class="built_in">print</span>(response.request) <span class="comment">// 原请求链接</span></div><div class="line">    <span class="built_in">print</span>(response.response) <span class="comment">// 请求响应</span></div><div class="line">    <span class="built_in">print</span>(response.data) <span class="comment">// 服务器数据</span></div><div class="line">    <span class="built_in">print</span>(response.result) <span class="comment">// 返回结果</span></div><div class="line"></div><div class="line">    <span class="keyword">if</span> <span class="keyword">let</span> <span class="type">JSON</span> = response.result.value &#123;</div><div class="line">        <span class="built_in">print</span>(<span class="string">"JSON: <span class="subst">\(JSON)</span>"</span>)</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="Alamofire默认提供5中响应处理"><a href="#Alamofire默认提供5中响应处理" class="headerlink" title="Alamofire默认提供5中响应处理"></a>Alamofire默认提供5中响应处理</h3><h4 id="1-Response-不推荐"><a href="#1-Response-不推荐" class="headerlink" title="1.Response(不推荐)"></a>1.Response(不推荐)</h4><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">response</span><span class="params">(</span></span></div><div class="line">    queue: DispatchQueue?,</div><div class="line">    completionHandler: @escaping <span class="params">(DefaultDownloadResponse)</span> -&gt; <span class="type">Void</span>)</div><div class="line">    -&gt; <span class="type">Self</span></div></pre></td></tr></table></figure>
<p>对返回的数据不做任何处理<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="type">Alamofire</span>.request(<span class="string">"https://httpbin.org/get"</span>).response &#123; (response) <span class="keyword">in</span></div><div class="line">    <span class="built_in">print</span>(<span class="string">"Request: <span class="subst">\(response.request)</span>"</span>)</div><div class="line">    <span class="built_in">print</span>(<span class="string">"Response: <span class="subst">\(response.response)</span>"</span>)</div><div class="line">    <span class="built_in">print</span>(<span class="string">"error: <span class="subst">\(response.error)</span>"</span>)</div><div class="line"></div><div class="line">    <span class="keyword">if</span> <span class="keyword">let</span> data = response.data, <span class="keyword">let</span> utf8Text = <span class="type">String</span>(data: data, encoding: .utf8) &#123;</div><div class="line">        <span class="built_in">print</span>(<span class="string">"Data: <span class="subst">\(utf8Text)</span>"</span>)</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h4 id="2-Response-Data"><a href="#2-Response-Data" class="headerlink" title="2.Response Data"></a>2.Response Data</h4><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">responseData</span><span class="params">(</span></span></div><div class="line">    queue: DispatchQueue?,</div><div class="line">    completionHandler: @escaping <span class="params">(DataResponse&lt;Data&gt;)</span> -&gt; <span class="type">Void</span>)</div><div class="line">    -&gt; <span class="type">Self</span></div></pre></td></tr></table></figure>
<p>如果返回结果没有出现错误,返回的result是.success和data类型的value<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="type">Alamofire</span>.request(<span class="string">"https://httpbin.org/get"</span>).responseData &#123; (response) <span class="keyword">in</span></div><div class="line">    <span class="built_in">print</span>(<span class="string">"All Response Info: <span class="subst">\(response)</span>"</span>)</div><div class="line"></div><div class="line">    <span class="keyword">if</span> <span class="keyword">let</span> data = response.result.value, <span class="keyword">let</span> utf8Text = <span class="type">String</span>(data: data, encoding: .utf8) &#123;</div><div class="line">        <span class="built_in">print</span>(<span class="string">"Data: <span class="subst">\(utf8Text)</span>"</span>)</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h4 id="3-Response-String"><a href="#3-Response-String" class="headerlink" title="3.Response String"></a>3.Response String</h4><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">responseString</span><span class="params">(</span></span></div><div class="line">    queue: DispatchQueue?,</div><div class="line">    encoding: String.Encoding?,</div><div class="line">    completionHandler: @escaping <span class="params">(DataResponse&lt;String&gt;)</span> -&gt; <span class="type">Void</span>)</div><div class="line">    -&gt; <span class="type">Self</span></div></pre></td></tr></table></figure>
<p>如果返回结果没有出现错误,返回的result是.success和String类型的value<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="type">Alamofire</span>.request(<span class="string">"https://httpbin.org/get"</span>).responseString &#123; response <span class="keyword">in</span></div><div class="line">    <span class="built_in">print</span>(<span class="string">"Success: <span class="subst">\(response.result.isSuccess)</span>"</span>)</div><div class="line">    <span class="built_in">print</span>(<span class="string">"Response String: <span class="subst">\(response.result.value)</span>"</span>)</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h4 id="4-Response-JSON"><a href="#4-Response-JSON" class="headerlink" title="4.Response JSON"></a>4.Response JSON</h4><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">responseJSON</span><span class="params">(</span></span></div><div class="line">    queue: DispatchQueue?,</div><div class="line">    completionHandler: @escaping <span class="params">(DataResponse&lt;Any&gt;)</span> -&gt; <span class="type">Void</span>)</div><div class="line">    -&gt; <span class="type">Self</span></div></pre></td></tr></table></figure>
<p>如果返回结果没有出现错误,返回的result是.success和Any类型的value<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="type">Alamofire</span>.request(<span class="string">"https://httpbin.org/get"</span>).responseJSON &#123; response <span class="keyword">in</span></div><div class="line">    <span class="keyword">if</span> <span class="keyword">let</span> json = response.result.value &#123;</div><div class="line">    <span class="built_in">print</span>(<span class="string">"JSON: <span class="subst">\(json)</span>"</span>)</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h4 id="5-Response-PropertyList-plist"><a href="#5-Response-PropertyList-plist" class="headerlink" title="5.Response PropertyList (plist)"></a>5.Response PropertyList (plist)</h4><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">responsePropertyList</span><span class="params">(</span></span></div><div class="line">    queue: DispatchQueue?,</div><div class="line">    completionHandler: @escaping <span class="params">(DataResponse&lt;Any&gt;)</span> -&gt; <span class="type">Void</span>))</div><div class="line">    -&gt; <span class="type">Self</span></div></pre></td></tr></table></figure>
<h3 id="响应链"><a href="#响应链" class="headerlink" title="响应链"></a>响应链</h3><p>可以多个响应方式链式调用<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="type">Alamofire</span>.request(<span class="string">"https://httpbin.org/get"</span>)</div><div class="line">    .responseString &#123; (response) <span class="keyword">in</span></div><div class="line">        <span class="built_in">print</span>(<span class="string">"Response String: <span class="subst">\(response.result.value)</span>"</span>)</div><div class="line">&#125;</div><div class="line">    .responseJSON &#123; (response) <span class="keyword">in</span></div><div class="line">        <span class="built_in">print</span>(<span class="string">"Response JSON: <span class="subst">\(response.result.value)</span>"</span>)</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="请求队列"><a href="#请求队列" class="headerlink" title="请求队列"></a>请求队列</h3><p>默认情况下,请求是在主队列中进行的,我们可以自己定制队列<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> utilityQueue = <span class="type">DispatchQueue</span>.global(qos: .utility)</div><div class="line"><span class="type">Alamofire</span>.request(<span class="string">"https://httpbin.org/get"</span>).responseJSON(queue: utilityQueue) &#123; (response) <span class="keyword">in</span></div><div class="line">    <span class="built_in">print</span>(<span class="string">"Executing response handler on utility queue"</span>)</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="响应验证"><a href="#响应验证" class="headerlink" title="响应验证"></a>响应验证</h3><h4 id="手动校验"><a href="#手动校验" class="headerlink" title="手动校验"></a>手动校验</h4><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="type">Alamofire</span>.request(<span class="string">"https://httpbin.org/get"</span>)</div><div class="line">    .validate(statusCode: <span class="number">200</span>..&lt;<span class="number">300</span>)</div><div class="line">    .validate(contentType: [<span class="string">"application/json"</span>])</div><div class="line">    .responseData &#123; (response) <span class="keyword">in</span></div><div class="line">        <span class="keyword">switch</span> response.result &#123;</div><div class="line">        <span class="keyword">case</span> .success:</div><div class="line">            <span class="built_in">print</span>(<span class="string">"验证成功"</span>)</div><div class="line">        <span class="keyword">case</span> .failure:</div><div class="line">            <span class="built_in">print</span>(<span class="string">"验证失败"</span>)</div><div class="line">        &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="自动校验"><a href="#自动校验" class="headerlink" title="自动校验"></a>自动校验</h4><p>自动校验状态码范围200…299, 并且该Content-Type与请求头一致<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="type">Alamofire</span>.request(<span class="string">"https://httpbin.org/get"</span>).validate().responseJSON &#123; response <span class="keyword">in</span></div><div class="line">    <span class="keyword">switch</span> response.result &#123;</div><div class="line">    <span class="keyword">case</span> .success:</div><div class="line">        <span class="built_in">print</span>(<span class="string">"校验成功"</span>)</div><div class="line">    <span class="keyword">case</span> .failure(<span class="keyword">let</span> error):</div><div class="line">        <span class="built_in">print</span>(<span class="string">"校验失败: <span class="subst">\(error)</span>"</span>)</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="HTPP请求方法"><a href="#HTPP请求方法" class="headerlink" title="HTPP请求方法"></a>HTPP请求方法</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">enum</span> <span class="title">HTTPMethod</span>: <span class="title">String</span> </span>&#123;</div><div class="line">    <span class="keyword">case</span> options = <span class="string">"OPTIONS"</span></div><div class="line">    <span class="keyword">case</span> <span class="keyword">get</span>     = <span class="string">"GET"</span></div><div class="line">    <span class="keyword">case</span> head    = <span class="string">"HEAD"</span></div><div class="line">    <span class="keyword">case</span> post    = <span class="string">"POST"</span></div><div class="line">    <span class="keyword">case</span> put     = <span class="string">"PUT"</span></div><div class="line">    <span class="keyword">case</span> patch   = <span class="string">"PATCH"</span></div><div class="line">    <span class="keyword">case</span> delete  = <span class="string">"DELETE"</span></div><div class="line">    <span class="keyword">case</span> trace   = <span class="string">"TRACE"</span></div><div class="line">    <span class="keyword">case</span> connect = <span class="string">"CONNECT"</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这些值可以作为参数传递<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="type">Alamofire</span>.request(<span class="string">"https://httpbin.org/get"</span>) </div><div class="line"><span class="type">Alamofire</span>.request(<span class="string">"https://httpbin.org/post"</span>, method: .post)</div><div class="line"><span class="type">Alamofire</span>.request(<span class="string">"https://httpbin.org/put"</span>, method: .put)</div><div class="line"><span class="type">Alamofire</span>.request(<span class="string">"https://httpbin.org/delete"</span>, method: .delete)</div></pre></td></tr></table></figure></p>
<p>Alamofire.request默认方法参数是 .get</p>
<h2 id="参数编码"><a href="#参数编码" class="headerlink" title="参数编码"></a>参数编码</h2><p>Alamofire支持3种编码 URL JSON PropertyList</p>
<h3 id="1-URL编码"><a href="#1-URL编码" class="headerlink" title="1.URL编码"></a>1.URL编码</h3><h4 id="Get请求URL编码参数"><a href="#Get请求URL编码参数" class="headerlink" title="Get请求URL编码参数"></a>Get请求URL编码参数</h4><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> parameters: <span class="type">Parameters</span> = [<span class="string">"foo"</span>: <span class="string">"bar"</span>]</div><div class="line"></div><div class="line"><span class="comment">// 下面三种写法等价 </span></div><div class="line"><span class="type">Alamofire</span>.request(<span class="string">"https://httpbin.org/get"</span>, parameters: parameters) <span class="comment">// encoding defaults to `URLEncoding.default`</span></div><div class="line"><span class="type">Alamofire</span>.request(<span class="string">"https://httpbin.org/get"</span>, parameters: parameters, encoding: <span class="type">URLEncoding</span>.<span class="keyword">default</span>)</div><div class="line"><span class="type">Alamofire</span>.request(<span class="string">"https://httpbin.org/get"</span>, parameters: parameters, encoding: <span class="type">URLEncoding</span>(destination: .methodDependent))</div><div class="line"></div><div class="line"><span class="comment">// https://httpbin.org/get?foo=bar</span></div></pre></td></tr></table></figure>
<h4 id="Post请求URL编码参数"><a href="#Post请求URL编码参数" class="headerlink" title="Post请求URL编码参数"></a>Post请求URL编码参数</h4><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> parameters: <span class="type">Parameters</span> = [</div><div class="line">    <span class="string">"foo"</span>: <span class="string">"bar"</span>,</div><div class="line">    <span class="string">"baz"</span>: [<span class="string">"a"</span>, <span class="number">1</span>],</div><div class="line">    <span class="string">"qux"</span>: [</div><div class="line">        <span class="string">"x"</span>: <span class="number">1</span>,</div><div class="line">        <span class="string">"y"</span>: <span class="number">2</span>,</div><div class="line">        <span class="string">"z"</span>: <span class="number">3</span></div><div class="line">    ]</div><div class="line">]</div><div class="line"></div><div class="line"><span class="comment">// 下面三种写法等价 </span></div><div class="line"><span class="type">Alamofire</span>.request(<span class="string">"https://httpbin.org/post"</span>, parameters: parameters)</div><div class="line"><span class="type">Alamofire</span>.request(<span class="string">"https://httpbin.org/post"</span>, parameters: parameters, encoding: <span class="type">URLEncoding</span>.<span class="keyword">default</span>)</div><div class="line"><span class="type">Alamofire</span>.request(<span class="string">"https://httpbin.org/post"</span>, parameters: parameters, encoding: <span class="type">URLEncoding</span>.httpBody)</div><div class="line"></div><div class="line"><span class="comment">// HTTP body: foo=bar&amp;baz[]=a&amp;baz[]=1&amp;qux[x]=1&amp;qux[y]=2&amp;qux[z]=3</span></div></pre></td></tr></table></figure>
<h3 id="2-JSON编码"><a href="#2-JSON编码" class="headerlink" title="2.JSON编码"></a>2.JSON编码</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> parameters: <span class="type">Parameters</span> = [</div><div class="line">    <span class="string">"foo"</span>: [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],</div><div class="line">    <span class="string">"bar"</span>: [</div><div class="line">        <span class="string">"baz"</span>: <span class="string">"qux"</span></div><div class="line">    ]</div><div class="line">]</div><div class="line"></div><div class="line"><span class="comment">// 两种写法等价</span></div><div class="line"><span class="type">Alamofire</span>.request(<span class="string">"https://httpbin.org/post"</span>, method: .post, parameters: parameters, encoding: <span class="type">JSONEncoding</span>.<span class="keyword">default</span>)</div><div class="line"><span class="type">Alamofire</span>.request(<span class="string">"https://httpbin.org/post"</span>, method: .post, parameters: parameters, encoding: <span class="type">JSONEncoding</span>(options: []))</div><div class="line"></div><div class="line"><span class="comment">// HTTP body: &#123;"foo": [1, 2, 3], "bar": &#123;"baz": "qux"&#125;&#125;</span></div></pre></td></tr></table></figure>
<h3 id="3-Property-List编码"><a href="#3-Property-List编码" class="headerlink" title="3.Property List编码"></a>3.Property List编码</h3><p>当ParameterEncoding类型不能满足需求时,可以创建自定义编码<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">JSONStringArrayEncoding</span>: <span class="title">ParameterEncoding</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">let</span> array: [<span class="type">String</span>]</div><div class="line"></div><div class="line">    <span class="keyword">init</span>(array: [<span class="type">String</span>]) &#123;</div><div class="line">        <span class="keyword">self</span>.array = array</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">encode</span><span class="params">(<span class="number">_</span> urlRequest: URLRequestConvertible, with parameters: Parameters?)</span></span> <span class="keyword">throws</span> -&gt; <span class="type">URLRequest</span> &#123;</div><div class="line">        <span class="keyword">var</span> urlRequest = urlRequest.urlRequest</div><div class="line">        <span class="keyword">let</span> data = <span class="keyword">try</span> <span class="type">JSONSerialization</span>.data(withJSONObject: array, options: [])</div><div class="line">        <span class="keyword">if</span> urlRequest.value(forHTTPHeaderField: <span class="string">"Content-Type"</span>) == <span class="literal">nil</span> &#123;</div><div class="line">            urlRequest.setValue(<span class="string">"application/json"</span>, forHTTPHeaderField: <span class="string">"Content-Type"</span>)</div><div class="line">        &#125;</div><div class="line">        urlRequest.httpBody = data</div><div class="line">        <span class="keyword">return</span> urlRequest</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="HTTP请求头"><a href="#HTTP请求头" class="headerlink" title="HTTP请求头"></a>HTTP请求头</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> headers: <span class="type">HTTPHeaders</span> = [</div><div class="line">    <span class="string">"Authorization"</span>: <span class="string">"Basic QWxhZGRpbjpvcGVuIHNlc2FtZQ=="</span>,</div><div class="line">    <span class="string">"Accept"</span>: <span class="string">"application/json"</span></div><div class="line">]</div><div class="line"></div><div class="line"><span class="type">Alamofire</span>.request(<span class="string">"https://httpbin.org/headers"</span>, headers: headers).responseJSON &#123; response <span class="keyword">in</span></div><div class="line">    <span class="built_in">debugPrint</span>(response)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="认证"><a href="#认证" class="headerlink" title="认证"></a>认证</h2><p>认证是由系统框架层处理URLCredential和URLAuthenticationChallenge。</p>
<h3 id="1-基本认证"><a href="#1-基本认证" class="headerlink" title="1.基本认证"></a>1.基本认证</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> user = <span class="string">"user"</span></div><div class="line"><span class="keyword">let</span> password = <span class="string">"password"</span></div><div class="line"><span class="type">Alamofire</span>.request(<span class="string">"https://httpbin.org/basic-auth/<span class="subst">\(user)</span>/<span class="subst">\(password)</span>"</span>)</div><div class="line">    .authenticate(user: user, password: password)</div><div class="line">    .responseJSON &#123; (response) <span class="keyword">in</span></div><div class="line">        <span class="built_in">debugPrint</span>(response)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>放在请求头中也能达到该效果<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> user = <span class="string">"user"</span></div><div class="line"><span class="keyword">let</span> password = <span class="string">"password"</span></div><div class="line"><span class="keyword">var</span> headers: <span class="type">HTTPHeaders</span> = [:]</div><div class="line"></div><div class="line"><span class="keyword">if</span> <span class="keyword">let</span> authorizationHeader = <span class="type">Request</span>.authorizationHeader(user: user, password: password) &#123;</div><div class="line">    headers[authorizationHeader.key] = authorizationHeader.value</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="type">Alamofire</span>.request(<span class="string">"https://httpbin.org/basic-auth/user/password"</span>, headers: headers)</div><div class="line">    .responseJSON &#123; response <span class="keyword">in</span></div><div class="line">        <span class="built_in">debugPrint</span>(response)</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="2-URLCredential认证"><a href="#2-URLCredential认证" class="headerlink" title="2.URLCredential认证"></a>2.URLCredential认证</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> user = <span class="string">"user"</span></div><div class="line"><span class="keyword">let</span> password = <span class="string">"password"</span></div><div class="line"><span class="keyword">let</span> credential = <span class="type">URLCredential</span>(user: user, password: password, persistence: .forSession)</div><div class="line"></div><div class="line"><span class="type">Alamofire</span>.request(<span class="string">"https://httpbin.org/basic-auth/<span class="subst">\(user)</span>/<span class="subst">\(password)</span>"</span>)</div><div class="line">    .authenticate(usingCredential: credential)</div><div class="line">    .responseJSON &#123; response <span class="keyword">in</span></div><div class="line">        <span class="built_in">debugPrint</span>(response)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="下载数据到文件夹"><a href="#下载数据到文件夹" class="headerlink" title="下载数据到文件夹"></a>下载数据到文件夹</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="type">Alamofire</span>.download(<span class="string">"https://httpbin.org/image/png"</span>).responseData &#123; (response) <span class="keyword">in</span></div><div class="line">    <span class="keyword">if</span> <span class="keyword">let</span> data = response.result.value &#123;</div><div class="line">        <span class="keyword">let</span> image = <span class="type">UIImage</span>(data: data)</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="下载到执行文件夹中"><a href="#下载到执行文件夹中" class="headerlink" title="下载到执行文件夹中"></a>下载到执行文件夹中</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> destination: <span class="type">DownloadRequest</span>.<span class="type">DownloadFileDestination</span> = &#123; <span class="number">_</span>, <span class="number">_</span> <span class="keyword">in</span></div><div class="line">    <span class="keyword">let</span> documentsURL = <span class="type">FileManager</span>.<span class="keyword">default</span>.urls(<span class="keyword">for</span>: .documentDirectory, <span class="keyword">in</span>: .userDomainMask)[<span class="number">0</span>]</div><div class="line">    <span class="keyword">let</span> fileURL = documentsURL.appendingPathComponent(<span class="string">"pig.png"</span>)</div><div class="line"></div><div class="line">    <span class="keyword">return</span> (fileURL, [.removePreviousFile, .createIntermediateDirectories])</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="type">Alamofire</span>.download(urlString, to: destination).response &#123; response <span class="keyword">in</span></div><div class="line">    <span class="built_in">print</span>(response)</div><div class="line"></div><div class="line">    <span class="keyword">if</span> response.error == <span class="literal">nil</span>, <span class="keyword">let</span> imagePath = response.destinationURL?.path &#123;</div><div class="line">        <span class="keyword">let</span> image = <span class="type">UIImage</span>(contentsOfFile: imagePath)</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>下载到建议的目录下<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> destination = <span class="type">DownloadRequest</span>.suggestedDownloadDestination(<span class="keyword">for</span>: .documentDirectory)</div><div class="line"><span class="type">Alamofire</span>.download(<span class="string">"https://httpbin.org/image/png"</span>, to: destination)</div></pre></td></tr></table></figure></p>
<h3 id="下载进度"><a href="#下载进度" class="headerlink" title="下载进度"></a>下载进度</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="type">Alamofire</span>.download(<span class="string">"https://httpbin.org/image/png"</span>)</div><div class="line">    .downloadProgress &#123; progress <span class="keyword">in</span></div><div class="line">        <span class="built_in">print</span>(<span class="string">"下载进度: <span class="subst">\(progress.fractionCompleted)</span>"</span>)</div><div class="line">    &#125;</div><div class="line">    .responseData &#123; response <span class="keyword">in</span></div><div class="line">        <span class="keyword">if</span> <span class="keyword">let</span> data = response.result.value &#123;</div><div class="line">            <span class="keyword">let</span> image = <span class="type">UIImage</span>(data: data)</div><div class="line">        &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>来个线程<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> utilityQueue = <span class="type">DispatchQueue</span>.global(qos: .utility)</div><div class="line"></div><div class="line"><span class="type">Alamofire</span>.download(<span class="string">"https://httpbin.org/image/png"</span>)</div><div class="line">    .downloadProgress(queue: utilityQueue) &#123; progress <span class="keyword">in</span></div><div class="line">        <span class="built_in">print</span>(<span class="string">"Download Progress: <span class="subst">\(progress.fractionCompleted)</span>"</span>)</div><div class="line">    &#125;</div><div class="line">    .responseData &#123; response <span class="keyword">in</span></div><div class="line">        <span class="keyword">if</span> <span class="keyword">let</span> data = response.result.value &#123;</div><div class="line">            <span class="keyword">let</span> image = <span class="type">UIImage</span>(data: data)</div><div class="line">        &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="恢复下载"><a href="#恢复下载" class="headerlink" title="恢复下载"></a>恢复下载</h3><p>有时候我们在下载的时候可能会取消或者中断了,这时候下次可能需要接着下载,这时候就需要恢复下载<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ImageRequestor</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">var</span> resumeData: <span class="type">Data</span>?</div><div class="line">    <span class="keyword">private</span> <span class="keyword">var</span> image: <span class="type">UIImage</span>?</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">fetchImage</span><span class="params">(completion: <span class="params">(UIImage?)</span></span></span> -&gt; <span class="type">Void</span>) &#123;</div><div class="line">        <span class="keyword">guard</span> image == <span class="literal">nil</span> <span class="keyword">else</span> &#123; completion(image) ; <span class="keyword">return</span> &#125;</div><div class="line"></div><div class="line">        <span class="keyword">let</span> destination: <span class="type">DownloadRequest</span>.<span class="type">DownloadFileDestination</span> = &#123; <span class="number">_</span>, <span class="number">_</span> <span class="keyword">in</span></div><div class="line">            <span class="keyword">let</span> documentsURL = <span class="type">FileManager</span>.<span class="keyword">default</span>.urls(<span class="keyword">for</span>: .documentDirectory, <span class="keyword">in</span>: .userDomainMask)[<span class="number">0</span>]</div><div class="line">            <span class="keyword">let</span> fileURL = documentsURL.appendingPathComponent(<span class="string">"pig.png"</span>)</div><div class="line"></div><div class="line">            <span class="keyword">return</span> (fileURL, [.removePreviousFile, .createIntermediateDirectories])</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">let</span> request: <span class="type">DownloadRequest</span></div><div class="line"></div><div class="line">        <span class="keyword">if</span> <span class="keyword">let</span> resumeData = resumeData &#123;</div><div class="line">            request = <span class="type">Alamofire</span>.download(resumingWith: resumeData)</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            request = <span class="type">Alamofire</span>.download(<span class="string">"https://httpbin.org/image/png"</span>)</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        request.responseData &#123; response <span class="keyword">in</span></div><div class="line">            <span class="keyword">switch</span> response.result &#123;</div><div class="line">            <span class="keyword">case</span> .success(<span class="keyword">let</span> data):</div><div class="line">                <span class="keyword">self</span>.image = <span class="type">UIImage</span>(data: data)</div><div class="line">            <span class="keyword">case</span> .failure:</div><div class="line">                <span class="keyword">self</span>.resumeData = response.resumeData</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="上传文件"><a href="#上传文件" class="headerlink" title="上传文件"></a>上传文件</h2><h3 id="1-上传Data文件"><a href="#1-上传Data文件" class="headerlink" title="1.上传Data文件"></a>1.上传Data文件</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> imageData = <span class="type">UIImagePNGRepresentation</span>(image)!</div><div class="line"><span class="type">Alamofire</span>.upload(imageData, to: <span class="string">"https://httpbin.org/post"</span>).responseJSON &#123; response <span class="keyword">in</span></div><div class="line">    <span class="built_in">debugPrint</span>(response)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="2-上传File"><a href="#2-上传File" class="headerlink" title="2.上传File"></a>2.上传File</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> fileURL = <span class="type">Bundle</span>.main.url(forResource: <span class="string">"video"</span>, withExtension: <span class="string">"mov"</span>)!</div><div class="line"><span class="type">Alamofire</span>.upload(fileURL, to: <span class="string">"https://httpbin.org/post"</span>).responseJSON &#123; response <span class="keyword">in</span></div><div class="line">    <span class="built_in">debugPrint</span>(response)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="3-上传多文件"><a href="#3-上传多文件" class="headerlink" title="3.上传多文件"></a>3.上传多文件</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="type">Alamofire</span>.upload(</div><div class="line">    multipartFormData: &#123; multipartFormData <span class="keyword">in</span></div><div class="line">        multipartFormData.append(<span class="type">ImageURL1</span>, withName: <span class="string">"image1"</span>)</div><div class="line">        multipartFormData.append(<span class="type">ImageURL2</span>, withName: <span class="string">"image2"</span>)</div><div class="line">    &#125;,</div><div class="line">    to: <span class="string">"https://httpbin.org/post"</span>,</div><div class="line">    encodingCompletion: &#123; encodingResult <span class="keyword">in</span></div><div class="line">        <span class="keyword">switch</span> encodingResult &#123;</div><div class="line">        <span class="keyword">case</span> .success(<span class="keyword">let</span> upload, <span class="number">_</span>, <span class="number">_</span>):</div><div class="line">            upload.responseJSON &#123; response <span class="keyword">in</span></div><div class="line">                <span class="built_in">debugPrint</span>(response)</div><div class="line">            &#125;</div><div class="line">        <span class="keyword">case</span> .failure(<span class="keyword">let</span> encodingError):</div><div class="line">            <span class="built_in">print</span>(encodingError)</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">)</div></pre></td></tr></table></figure>
<h3 id="4-上传进度"><a href="#4-上传进度" class="headerlink" title="4.上传进度"></a>4.上传进度</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> fileURL = <span class="type">Bundle</span>.main.url(forResource: <span class="string">"video"</span>, withExtension: <span class="string">"mov"</span>)!</div><div class="line"></div><div class="line"><span class="type">Alamofire</span>.upload(fileURL, to: <span class="string">"https://httpbin.org/post"</span>)</div><div class="line">    .uploadProgress &#123; progress <span class="keyword">in</span></div><div class="line">        <span class="built_in">print</span>(<span class="string">"上传进度: <span class="subst">\(progress.fractionCompleted)</span>"</span>)</div><div class="line">    &#125;</div><div class="line">    .downloadProgress &#123; progress <span class="keyword">in</span></div><div class="line">        <span class="built_in">print</span>(<span class="string">"下载进度: <span class="subst">\(progress.fractionCompleted)</span>"</span>)</div><div class="line">    &#125;</div><div class="line">    .responseJSON &#123; response <span class="keyword">in</span></div><div class="line">        <span class="built_in">debugPrint</span>(response)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="证书验证"><a href="#证书验证" class="headerlink" title="证书验证"></a>证书验证</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> serverTrustPolicy = <span class="type">ServerTrustPolicy</span>.pinCertificates(</div><div class="line">    certificates: <span class="type">ServerTrustPolicy</span>.certificatesInBundle(),</div><div class="line">    validateCertificateChain: <span class="literal">true</span>,</div><div class="line">    validateHost: <span class="literal">true</span></div><div class="line">)</div></pre></td></tr></table></figure>
<p>基本用法先介绍到这里,下篇将仔细整理HTTPS以及验证证书</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[GCD Swift3.0]]></title>
      <url>https://xiaoxionglaoshi.github.io/2016/11/09/GCD-Swift3-0/</url>
      <content type="html"><![CDATA[<p>Swift3.0之后GCD的写法是越来越简单,以下是平时项目开发中可能会遇到的多线程操作,现在整理一起方便以后查阅.<br><a id="more"></a></p>
<h2 id="基本分类"><a href="#基本分类" class="headerlink" title="基本分类"></a>基本分类</h2><h3 id="队列执行任务分为"><a href="#队列执行任务分为" class="headerlink" title="队列执行任务分为"></a>队列执行任务分为</h3><blockquote>
<p>同步:在当前线程中执行,执行完才会执行下一条命令,会阻塞当前线程<br>异步:在另一个线程中执行,下一条命令不许要等该线程执行完,不会阻塞当前线程</p>
</blockquote>
<h3 id="队列分类"><a href="#队列分类" class="headerlink" title="队列分类"></a>队列分类</h3><blockquote>
<p>串行队列:让任务一个接一个的执行<br>并发队列:多个任务同时进行,只有在异步函数下才有效</p>
</blockquote>
<h2 id="创建分类"><a href="#创建分类" class="headerlink" title="创建分类"></a>创建分类</h2><h3 id="创建串行队列"><a href="#创建串行队列" class="headerlink" title="创建串行队列"></a>创建串行队列</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> serial = <span class="type">DispatchQueue</span>(label: <span class="string">"serialqueue1"</span>)</div></pre></td></tr></table></figure>
<h3 id="创建并行队列"><a href="#创建并行队列" class="headerlink" title="创建并行队列"></a>创建并行队列</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> concurrent = <span class="type">DispatchQueue</span>(label: <span class="string">"concurrentqueue1"</span>, </div><div class="line">                                 qos: .userInitiated, </div><div class="line">                          attributes: .concurrent, </div><div class="line">                autoreleaseFrequency: .workItem, </div><div class="line">                              target: <span class="literal">nil</span>)</div></pre></td></tr></table></figure>
<h4 id="参数说明"><a href="#参数说明" class="headerlink" title="参数说明"></a>参数说明</h4><blockquote>
<p>1.label 队列名称<br>2.qos 设置优先级 (默认是 default)</p>
<ul>
<li>.background         : 后台(非常耗时的不重要的操作放在这里,执行完调用主线程)</li>
<li>.utility            : 低</li>
<li>.default            : 正常的</li>
<li>.userInitiated      : 高(不要放太耗时的操作)</li>
<li>.userInteractive    : 用户交互(跟主线程一样)</li>
<li>.unspecified        : 不指定</li>
</ul>
<p>3.attributes 队列类型</p>
<ul>
<li>.concurrent         : 并行队列</li>
<li>.initiallyInactive  : 与线程优先级有关</li>
</ul>
</blockquote>
<h3 id="获取系统队列"><a href="#获取系统队列" class="headerlink" title="获取系统队列"></a>获取系统队列</h3><h4 id="获取系统存在的全局队列-可设置优先级"><a href="#获取系统存在的全局队列-可设置优先级" class="headerlink" title="获取系统存在的全局队列,可设置优先级"></a>获取系统存在的全局队列,可设置优先级</h4><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> globalQueue = <span class="type">DispatchQueue</span>.global(qos: .<span class="keyword">default</span>)</div></pre></td></tr></table></figure>
<h4 id="获取系统主线程-跟UI有关的操作需要放在主线程中执行"><a href="#获取系统主线程-跟UI有关的操作需要放在主线程中执行" class="headerlink" title="获取系统主线程,跟UI有关的操作需要放在主线程中执行"></a>获取系统主线程,跟UI有关的操作需要放在主线程中执行</h4><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> mainQueue = <span class="type">DispatchQueue</span>.main</div></pre></td></tr></table></figure>
<h3 id="队列操作"><a href="#队列操作" class="headerlink" title="队列操作"></a>队列操作</h3><h4 id="添加任务到队列中"><a href="#添加任务到队列中" class="headerlink" title="添加任务到队列中"></a>添加任务到队列中</h4><h5 id="异步"><a href="#异步" class="headerlink" title="异步"></a>异步</h5><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="type">DispatchQueue</span>.global(qos: .<span class="keyword">default</span>).async &#123;</div><div class="line">    <span class="built_in">print</span>(<span class="string">"耗时操作"</span>)</div><div class="line">    <span class="type">DispatchQueue</span>.main.async &#123;</div><div class="line">        <span class="built_in">print</span>(<span class="string">"耗时操作完,回调主线程刷新界面"</span>)</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="同步"><a href="#同步" class="headerlink" title="同步"></a>同步</h4><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 全局线程</span></div><div class="line"><span class="type">DispatchQueue</span>.global(qos: .<span class="keyword">default</span>).sync &#123;</div><div class="line">    <span class="built_in">print</span>(<span class="string">"我在全局队列中执行同步操作"</span>)</div><div class="line">&#125;</div><div class="line"><span class="comment">// 主线程执行同步会引起死锁</span></div><div class="line"><span class="type">DispatchQueue</span>.main.sync &#123;</div><div class="line">    <span class="built_in">print</span>(<span class="string">"我在主线程中执行同步操作"</span>)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="暂停、继续队列"><a href="#暂停、继续队列" class="headerlink" title="暂停、继续队列"></a>暂停、继续队列</h4><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> concurrentQueue = <span class="type">DispatchQueue</span>(label: <span class="string">"queue2"</span>, attributes: .concurrent)</div><div class="line">concurrentQueue.async &#123;</div><div class="line">    (<span class="number">1</span>...<span class="number">100000000000000000</span>).forEach(&#123; (index) <span class="keyword">in</span></div><div class="line">        <span class="built_in">print</span>(index)</div><div class="line">    &#125;)</div><div class="line">&#125;</div><div class="line"><span class="comment">// 暂停</span></div><div class="line">concurrentQueue.suspend()</div><div class="line">sleep(<span class="number">2</span>)</div><div class="line"><span class="comment">// 继续</span></div><div class="line">concurrentQueue.resume()</div></pre></td></tr></table></figure>
<h4 id="延时操作"><a href="#延时操作" class="headerlink" title="延时操作"></a>延时操作</h4><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="type">DispatchQueue</span>.main.asyncAfter(deadline: <span class="type">DispatchTime</span>.now() + <span class="number">2</span>) &#123; </div><div class="line">    <span class="built_in">print</span>(<span class="string">"我延时两秒执行"</span>)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="只执行一次"><a href="#只执行一次" class="headerlink" title="只执行一次"></a>只执行一次</h4><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> <span class="keyword">var</span> once1:<span class="type">Void</span> = &#123;</div><div class="line">    <span class="comment">//只执行一次</span></div><div class="line">    <span class="built_in">print</span>(<span class="string">"once1"</span>)</div><div class="line">&#125;()</div><div class="line"></div><div class="line"><span class="keyword">private</span> <span class="built_in">lazy</span> <span class="keyword">var</span> once2:<span class="type">String</span> = &#123;</div><div class="line">    <span class="comment">//只执行一次，可用于创建单例</span></div><div class="line">    <span class="built_in">print</span>(<span class="string">"once2"</span>)</div><div class="line">    <span class="keyword">return</span> <span class="string">"once2"</span></div><div class="line">&#125;()</div></pre></td></tr></table></figure>
<h4 id="Group的用法"><a href="#Group的用法" class="headerlink" title="Group的用法"></a>Group的用法</h4><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 获取全局队列</span></div><div class="line"><span class="keyword">let</span> queue = <span class="type">DispatchQueue</span>.global()</div><div class="line"><span class="comment">// 创建group</span></div><div class="line"><span class="keyword">let</span> group = <span class="type">DispatchGroup</span>()</div><div class="line"><span class="comment">// 并发</span></div><div class="line">queue.async(group: group, qos: .<span class="keyword">default</span>, flags: .barrier) &#123;</div><div class="line">    sleep(<span class="number">2</span>)</div><div class="line">    <span class="built_in">print</span>(<span class="string">"我是第一吗"</span>)</div><div class="line">&#125;</div><div class="line">queue.async(group: group, qos: .<span class="keyword">default</span>, flags: .barrier) &#123;</div><div class="line">    sleep(<span class="number">2</span>)</div><div class="line">    <span class="built_in">print</span>(<span class="string">"我是第二吗"</span>)</div><div class="line">&#125;</div><div class="line">queue.async(group: group, qos: .<span class="keyword">default</span>, flags: .barrier) &#123;</div><div class="line">    sleep(<span class="number">2</span>)</div><div class="line">    <span class="built_in">print</span>(<span class="string">"我是第三吗"</span>)</div><div class="line">&#125;</div><div class="line"><span class="comment">// 不阻塞主线程</span></div><div class="line">group.notify(queue: queue) &#123; </div><div class="line">    <span class="built_in">print</span>(<span class="string">"大家都执行完毕了吧"</span>)</div><div class="line">&#125;</div><div class="line">如果有多个并发队列在一个组里，我们想在这些操作执行完了再继续，调用wait</div><div class="line">group.wait()</div></pre></td></tr></table></figure>
<h4 id="指定多次Block到队列中"><a href="#指定多次Block到队列中" class="headerlink" title="指定多次Block到队列中"></a>指定多次Block到队列中</h4><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> queue2 = <span class="type">DispatchQueue</span>.global()</div><div class="line">queue2.async &#123;</div><div class="line">    <span class="type">DispatchQueue</span>.concurrentPerform(iterations: <span class="number">3</span>, execute: &#123; (index) <span class="keyword">in</span></div><div class="line">        <span class="built_in">print</span>(index)</div><div class="line">    &#125;)</div><div class="line">    <span class="type">DispatchQueue</span>.main.async &#123;</div><div class="line">        <span class="built_in">print</span>(<span class="string">"执行完毕,在主线程中刷新"</span>)</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="信号量"><a href="#信号量" class="headerlink" title="信号量"></a>信号量</h4><p>为了线程安全的统计数量，我们会使用信号量作计数。<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> queue3 = <span class="type">DispatchQueue</span>.global(qos: .<span class="keyword">default</span>)</div><div class="line"><span class="keyword">let</span> semaphore = <span class="type">DispatchSemaphore</span>(value: <span class="number">1</span>)</div><div class="line">(<span class="number">1</span>...<span class="number">1000</span>).forEach &#123; (index) <span class="keyword">in</span></div><div class="line">    queue3.async &#123;</div><div class="line">        <span class="comment">//  信号量减一,</span></div><div class="line">        semaphore.wait()</div><div class="line">        <span class="built_in">print</span>(index)</div><div class="line">        <span class="comment">// 信号量加一</span></div><div class="line">        semaphore.signal()</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><a href="https://github.com/xiaoxionglaoshi/DNGCDDemo" target="_blank" rel="external">源码下载</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[swift3.0新特性]]></title>
      <url>https://xiaoxionglaoshi.github.io/2016/11/07/swift3-0%E6%96%B0%E7%89%B9%E6%80%A7/</url>
      <content type="html"><![CDATA[<p>自 Swift 开源以来，Swift 的开发与演变已经完全由社区和核心团队所共同主导，它们在 Swift 3 当中为我们带来了巨大的变化和改进，而这正是我们所需要详细了解的</p>
<a id="more"></a>
<h2 id="彻底移除在-Swift-2-2-就已经弃用的特性"><a href="#彻底移除在-Swift-2-2-就已经弃用的特性" class="headerlink" title="彻底移除在 Swift 2.2 就已经弃用的特性"></a>彻底移除在 Swift 2.2 就已经弃用的特性</h2><h3 id="弃用-与-–-操作符"><a href="#弃用-与-–-操作符" class="headerlink" title="弃用 ++ 与 – 操作符"></a>弃用 ++ 与 – 操作符</h3><p>过去我们可以使用 ++ 与 – 操作符来实现自增自减，现已废弃。<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> i = <span class="number">0</span></div><div class="line">i++</div><div class="line">++i</div><div class="line">i--</div><div class="line">--i</div></pre></td></tr></table></figure></p>
<p>可以使用复合加法运算（+=）与减法运算（-=），或者使用普通的加法运算（+）与减法运算（-）实现同样的功能。<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//使用复合加法运算（+=）与减法运算（-=）</span></div><div class="line"><span class="keyword">var</span> i = <span class="number">0</span></div><div class="line">i += <span class="number">1</span></div><div class="line">i -= <span class="number">1</span></div><div class="line"></div><div class="line"><span class="comment">//使用普通的加法运算（+）与减法运算（-）</span></div><div class="line">i = i + <span class="number">1</span></div><div class="line">i = i - <span class="number">1</span></div></pre></td></tr></table></figure></p>
<h3 id="废除C语言风格的for循环"><a href="#废除C语言风格的for循环" class="headerlink" title="废除C语言风格的for循环"></a>废除C语言风格的for循环</h3><p>我们过去可能习惯下面风格的 for 循环，现在也已废弃。<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> <span class="keyword">var</span> i=<span class="number">1</span>; i&lt;<span class="number">100</span>; i++ &#123;</div><div class="line"><span class="built_in">print</span>(<span class="string">"<span class="subst">\(i)</span>"</span>)</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>现在可以使用 for-in 循环，或者使用 for-each 加闭包的写法实现同样的功能。<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//for-in循环</span></div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">1</span>...<span class="number">10</span> &#123;</div><div class="line"><span class="built_in">print</span>(i)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//for-each循环</span></div><div class="line">(<span class="number">1</span>...<span class="number">10</span>).forEach &#123;</div><div class="line"><span class="built_in">print</span>($<span class="number">0</span>)</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="移除函数参数的-var-标记"><a href="#移除函数参数的-var-标记" class="headerlink" title="移除函数参数的 var 标记"></a>移除函数参数的 var 标记</h3><p>在 Swift 函数中，参数默认是常量。过去可以在参数前加关键字 var 将其定义为变量，这样函数内部就可以对该参数进行修改（外部的参数任然不会被修改）。<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> age = <span class="number">22</span></div><div class="line">add(age)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">add</span><span class="params">(<span class="keyword">var</span> age:Int)</span></span> &#123;</div><div class="line">age += <span class="number">1</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>现在这种做法已经被废弃，Swift 3 不再允许开发者这样来将参数标记为变量了。</p>
<h3 id="所有函数参数都必须带上标签"><a href="#所有函数参数都必须带上标签" class="headerlink" title="所有函数参数都必须带上标签"></a>所有函数参数都必须带上标签</h3><p>过去如果一个函数有多个参数，调用的时候第一个参数无需带标签，而从第二个参数开始，必须要带标签。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">let number = additive(8, b: 12)</div><div class="line"></div><div class="line">func additive(a:Int, b:Int) -&gt; Int&#123;</div><div class="line">    return a + b</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>现在为了确保函数参数标签的一致性，所有参数都必须带上标签。<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> number = additive(a: <span class="number">8</span>, b: <span class="number">12</span>)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">additive</span><span class="params">(a:Int, b:Int)</span></span> -&gt; <span class="type">Int</span>&#123;</div><div class="line">    <span class="keyword">return</span> a + b</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>这个变化可能会造成我们的项目代码要进行较大的改动，毕竟涉及的地方很多。所以苹果又给出了一种不用给第一个参数带标签的解决方案。即在第一个参数前面加上一个下划线。<br>（不过这个只是方便我们代码从 Swift2 迁移到 Swift3 的一个折中方案，可以的话还是建议将所有的参数都带上标签。）<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> number = additive(<span class="number">8</span>, b: <span class="number">12</span>)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">additive</span><span class="params">(<span class="number">_</span> a:Int, b:Int)</span></span> -&gt; <span class="type">Int</span>&#123;</div><div class="line">    <span class="keyword">return</span> a + b</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="函数声明和函数调用都需要括号来包括参数"><a href="#函数声明和函数调用都需要括号来包括参数" class="headerlink" title="函数声明和函数调用都需要括号来包括参数"></a>函数声明和函数调用都需要括号来包括参数</h3><p>我们可以使用函数类型作为参数 ，对于一个参数是函数、返回值也是函数的函数。原来我们可能会这么写：<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">g</span><span class="params">(a: Int -&gt; Int)</span></span> -&gt; <span class="type">Int</span>-&gt;<span class="type">Int</span> &#123; ... &#125;</div></pre></td></tr></table></figure></p>
<p>当这样非常难以阅读，很难看出参数在哪里结束，返回值又从哪里开始。在 Swift 3 中变成这么定义这个函数：<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">g</span><span class="params">(a:<span class="params">(Int)</span></span></span> -&gt; <span class="type">Int</span>) -&gt; (<span class="type">Int</span>) -&gt; <span class="type">Int</span> &#123; ... &#125;</div></pre></td></tr></table></figure></p>
<h3 id="Selector-不再允许使用-String"><a href="#Selector-不再允许使用-String" class="headerlink" title="Selector 不再允许使用 String"></a>Selector 不再允许使用 String</h3><p>假设我们给按钮添加一个点击事件响应，点击后执行 tapped 函数。以前可以这么写：<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">button.addTarget(responder, action: <span class="string">"tapped"</span>, forControlEvents: .<span class="type">TouchUpInside</span>)</div></pre></td></tr></table></figure></p>
<p>但由于按钮的 selector 写的是字符串。如果字符串拼写错了，那程序会在运行时因找不到相关方法而崩溃。所以 Swift 3 将这种写法废除，改成 #selecor()。这样就将允许编译器提前检查方法名的拼写问题，而不用再等到运行时才发现问题。<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">button.addTarget(<span class="keyword">self</span>, action:#selector(tapped), <span class="keyword">for</span>:.touchUpInside)</div></pre></td></tr></table></figure></p>
<h2 id="Swift-3-的新特性"><a href="#Swift-3-的新特性" class="headerlink" title="Swift 3 的新特性"></a>Swift 3 的新特性</h2><h3 id="内联序列函数sequence"><a href="#内联序列函数sequence" class="headerlink" title="内联序列函数sequence"></a>内联序列函数sequence</h3><p>Swift 3 新增了两个全局函数：sequence(first: next:) 和 sequence(state: next:)。使用它们可以返回一个无限序列。下面是一个简单的使用样例<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 从某一个树节点一直向上遍历到根节点</span></div><div class="line"><span class="keyword">for</span> node <span class="keyword">in</span> sequence(first: leaf, next: &#123; $<span class="number">0</span>.parent &#125;) &#123;</div><div class="line">    <span class="comment">// node is leaf, then leaf.parent, then leaf.parent.parent, etc.</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 遍历出所有的2的n次方数（不考虑溢出）</span></div><div class="line"><span class="keyword">for</span> value <span class="keyword">in</span> sequence(first: <span class="number">1</span>, next: &#123; $<span class="number">0</span> * <span class="number">2</span> &#125;) &#123;</div><div class="line">    <span class="comment">// value is 1, then 2, then 4, then 8, etc.</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="key-path不再只能使用String"><a href="#key-path不再只能使用String" class="headerlink" title="key-path不再只能使用String"></a>key-path不再只能使用String</h3><p>这个是用在键值编码（KVC）与键值观察（KVO）上的<br>我们还是可以继续使用 String 类型的 key-Path：<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//用户类</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span>: <span class="title">NSObject</span></span>&#123;</div><div class="line">    <span class="keyword">var</span> name:<span class="type">String</span> = <span class="string">""</span>  <span class="comment">//姓名</span></div><div class="line">    <span class="keyword">var</span> age:<span class="type">Int</span> = <span class="number">0</span>  <span class="comment">//年龄</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//创建一个User实例对象</span></div><div class="line"><span class="keyword">let</span> user1 = <span class="type">User</span>()</div><div class="line">user1.name = <span class="string">"hangge"</span></div><div class="line">user1.age = <span class="number">100</span></div><div class="line"></div><div class="line"><span class="comment">//使用KVC取值</span></div><div class="line"><span class="keyword">let</span> name = user1.value(forKey: <span class="string">"name"</span>)</div><div class="line"><span class="built_in">print</span>(name)</div><div class="line"></div><div class="line"><span class="comment">//使用KVC赋值</span></div><div class="line">user1.setValue(<span class="string">"hangge.com"</span>, forKey: <span class="string">"name"</span>)</div></pre></td></tr></table></figure></p>
<p>但建议使用新增的 #keyPath() 写法，这样可以避免我们因为拼写错误而引发问题。<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//使用KVC取值</span></div><div class="line"><span class="keyword">let</span> name = user1.value(forKeyPath: #keyPath(<span class="type">User</span>.name))</div><div class="line"><span class="built_in">print</span>(name)</div><div class="line"></div><div class="line"><span class="comment">//使用KVC赋值</span></div><div class="line">user1.setValue(<span class="string">"hangge.com"</span>, forKeyPath: #keyPath(<span class="type">User</span>.name))</div></pre></td></tr></table></figure></p>
<h3 id="Foundation-去掉-NS-前缀"><a href="#Foundation-去掉-NS-前缀" class="headerlink" title="Foundation 去掉 NS 前缀"></a>Foundation 去掉 NS 前缀</h3><p>比如过去我们使用 Foundation 相关类来对文件中的 JSON 数据进行解析，这么写：<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> file = <span class="type">NSBundle</span>.mainBundle().pathForResource(<span class="string">"tutorials"</span>, ofType: <span class="string">"json"</span>)</div><div class="line"><span class="keyword">let</span> url = <span class="type">NSURL</span>(fileURLWithPath: file!)</div><div class="line"><span class="keyword">let</span> data = <span class="type">NSData</span>(contentsOfURL: url)</div><div class="line"><span class="keyword">let</span> json = <span class="keyword">try</span>! <span class="type">NSJSONSerialization</span>.<span class="type">JSONObjectWithData</span>(data!, options: [])</div><div class="line"><span class="built_in">print</span>(json)</div></pre></td></tr></table></figure></p>
<p>在 Swift 3 中，将移除 NS 前缀，就变成了：<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> file = <span class="type">Bundle</span>.main.path(forResource: <span class="string">"tutorials"</span>, ofType: <span class="string">"json"</span>)</div><div class="line"><span class="keyword">let</span> url = <span class="type">URL</span>(fileURLWithPath: file!)</div><div class="line"><span class="keyword">let</span> data = <span class="keyword">try</span>! <span class="type">Data</span>(contentsOf: url)</div><div class="line"><span class="keyword">let</span> json = <span class="keyword">try</span>! <span class="type">JSONSerialization</span>.jsonObject(with: data)</div><div class="line"><span class="built_in">print</span>(json)</div></pre></td></tr></table></figure></p>
<h3 id="除了M-PI-还有-pi"><a href="#除了M-PI-还有-pi" class="headerlink" title="除了M_PI 还有 .pi"></a>除了M_PI 还有 .pi</h3><p>在过去，我们使用 M_PI 常量来表示 π。所以根据半径求周长代码如下：<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> r =  <span class="number">3.0</span></div><div class="line"><span class="keyword">let</span> circumference = <span class="number">2</span> * <span class="type">M_PI</span> * r</div></pre></td></tr></table></figure></p>
<p>在 Swift 3 中，π 提供了 Float，Double 与 CGFloat 三种形式（Float.pi、Double.pi、CGFloat.pi），所以求周长还可以这么写：<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">et r = <span class="number">3.0</span></div><div class="line"><span class="keyword">let</span> circumference = <span class="number">2</span> * <span class="type">Double</span>.pi * r</div><div class="line"></div><div class="line"><span class="comment">//我们还可以将前缀省略，让其通过类型自动推断</span></div><div class="line"><span class="keyword">let</span> r = <span class="number">3.0</span></div><div class="line"><span class="keyword">let</span> circumference = <span class="number">2</span> * .pi * r</div></pre></td></tr></table></figure></p>
<h3 id="简化GCD的写法"><a href="#简化GCD的写法" class="headerlink" title="简化GCD的写法"></a>简化GCD的写法</h3><p>过去写法采用 C 语言的风格，初学者可能会不大适应。比如创建一个简单的异步线程<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> queue = dispatch_queue_create(<span class="string">"Swift 2.2"</span>, <span class="literal">nil</span>)</div><div class="line">dispatch_async(queue) &#123;</div><div class="line">    <span class="built_in">print</span>(<span class="string">"Swift 2.2 queue"</span>)</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>Swift 3 取消了这种冗余的写法，而采用了更为面向对象的方式：<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> queue = <span class="type">DispatchQueue</span>(label: <span class="string">"Swift 3"</span>)</div><div class="line">queue.async &#123;</div><div class="line">    <span class="built_in">print</span>(<span class="string">"Swift 3 queue"</span>)</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="Core-Graphics的写法也更加面向对象化"><a href="#Core-Graphics的写法也更加面向对象化" class="headerlink" title="Core Graphics的写法也更加面向对象化"></a>Core Graphics的写法也更加面向对象化</h3><p>Core Graphics 是一个相当强大的绘图框架，但是和 GCD 一样，它原来的 API 也是 C 语言风格的。<br>比如我们要创建一个 view，其内部背景使用 Core Graphics 进行绘制（红色边框，蓝色背景）。过去我们这么写：<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">View</span>: <span class="title">UIView</span> </span>&#123;</div><div class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">drawRect</span><span class="params">(rect: CGRect)</span></span> &#123;</div><div class="line">        <span class="keyword">let</span> context = <span class="type">UIGraphicsGetCurrentContext</span>()</div><div class="line">        <span class="keyword">let</span> blue = <span class="type">UIColor</span>.blueColor().<span class="type">CGColor</span></div><div class="line">        <span class="type">CGContextSetFillColorWithColor</span>(context, blue)</div><div class="line">        <span class="keyword">let</span> red = <span class="type">UIColor</span>.redColor().<span class="type">CGColor</span></div><div class="line">        <span class="type">CGContextSetStrokeColorWithColor</span>(context, red)</div><div class="line">        <span class="type">CGContextSetLineWidth</span>(context, <span class="number">10</span>)</div><div class="line">        <span class="type">CGContextAddRect</span>(context, frame)</div><div class="line">        <span class="type">CGContextDrawPath</span>(context, .<span class="type">FillStroke</span>)</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">let</span> frame = <span class="type">CGRect</span>(x: <span class="number">0</span>, y: <span class="number">0</span>, width: <span class="number">100</span>, height: <span class="number">50</span>)</div><div class="line"><span class="keyword">let</span> aView = <span class="type">View</span>(frame: frame)</div></pre></td></tr></table></figure></p>
<p>在 Swift 3 中改进了写法，只要对当前画布上下文解包，之后的所有绘制操作就都基于解包对象。<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">View</span>: <span class="title">UIView</span> </span>&#123;</div><div class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">draw</span><span class="params">(<span class="number">_</span> rect: CGRect)</span></span> &#123;</div><div class="line">        <span class="keyword">guard</span> <span class="keyword">let</span> context = <span class="type">UIGraphicsGetCurrentContext</span>() <span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">return</span></div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">let</span> blue = <span class="type">UIColor</span>.blue.cgColor</div><div class="line">        context.setFillColor(blue)</div><div class="line">        <span class="keyword">let</span> red = <span class="type">UIColor</span>.red.cgColor</div><div class="line">        context.setStrokeColor(red)</div><div class="line">        context.setLineWidth(<span class="number">10</span>)</div><div class="line">        context.addRect(frame)</div><div class="line">        context.drawPath(using: .fillStroke)</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">let</span> frame = <span class="type">CGRect</span>(x: <span class="number">0</span>, y: <span class="number">0</span>, width: <span class="number">100</span>, height: <span class="number">50</span>)</div><div class="line"><span class="keyword">let</span> aView = <span class="type">View</span>(frame: frame)</div></pre></td></tr></table></figure></p>
<h3 id="新增的访问控制关键字：fileprivate、open"><a href="#新增的访问控制关键字：fileprivate、open" class="headerlink" title="新增的访问控制关键字：fileprivate、open"></a>新增的访问控制关键字：fileprivate、open</h3><p>在 Swift 3 中在原有的 3 个访问控制关键字 private、public、internal 外。又添加了2个新关键字 fileprivate、open。它们可以看成是对原来 private 和 public 的进一步细分</p>
<h2 id="一些语法的修改"><a href="#一些语法的修改" class="headerlink" title="一些语法的修改"></a>一些语法的修改</h2><h3 id="数组排序：sort-与sorted"><a href="#数组排序：sort-与sorted" class="headerlink" title="数组排序：sort()与sorted()"></a>数组排序：sort()与sorted()</h3><p>过去数组排序的两个方法：sortInPlace() 和 sort()，现在分别改名成 sort() 和 sorted()<br>sort() 是直接对目标数组进行排序。sorted() 是返回一个排序后的数组，原数组不变。<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> array1 = [<span class="number">1</span>, <span class="number">5</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">4</span>]</div><div class="line">array1.<span class="built_in">sort</span>()</div><div class="line"><span class="built_in">print</span>(array1)  <span class="comment">//[1, 2, 3, 4, 5]</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> array2 = [<span class="number">1</span>, <span class="number">5</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">4</span>]</div><div class="line"><span class="keyword">let</span> sortedArray = array2.sorted()</div><div class="line"><span class="built_in">print</span>(array2)  <span class="comment">//[1, 5, 3, 2, 4]</span></div><div class="line"><span class="built_in">print</span>(sortedArray)  <span class="comment">//[1, 2, 3, 4, 5]</span></div></pre></td></tr></table></figure></p>
<h3 id="reversed-与enumerated"><a href="#reversed-与enumerated" class="headerlink" title="reversed()与enumerated()"></a>reversed()与enumerated()</h3><p>过去 reverse() 方法实现数组反转，enumerate() 方法实现遍历。现这两个方法都加上 ed 后缀（reversed、enumerated）<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> (<span class="number">1</span>...<span class="number">10</span>).reversed() &#123;</div><div class="line"><span class="built_in">print</span>(i)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">let</span> array = [<span class="number">1</span>, <span class="number">5</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">4</span>]</div><div class="line"><span class="keyword">for</span> (index, value) <span class="keyword">in</span> array.enumerated() &#123;</div><div class="line"><span class="built_in">print</span>(<span class="string">"<span class="subst">\(index + <span class="number">1</span>)</span> <span class="subst">\(value)</span>"</span>)</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="CGRect、CGPoint、CGSize"><a href="#CGRect、CGPoint、CGSize" class="headerlink" title="CGRect、CGPoint、CGSize"></a>CGRect、CGPoint、CGSize</h3><p>过去的 CGRectMake、CGPointMake、CGSizeMake 已废弃。现改用 CGRect、CGPoint、CGSize 代替。<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//Swift 2</span></div><div class="line"><span class="keyword">let</span> frame = <span class="type">CGRectMake</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">20</span>, <span class="number">20</span>)</div><div class="line"><span class="keyword">let</span> point = <span class="type">CGPointMake</span>(<span class="number">0</span>, <span class="number">0</span>)</div><div class="line"><span class="keyword">let</span> size = <span class="type">CGSizeMake</span>(<span class="number">20</span>, <span class="number">20</span>)</div><div class="line"></div><div class="line"><span class="comment">//Swift 3</span></div><div class="line"><span class="keyword">let</span> frame = <span class="type">CGRect</span>(x: <span class="number">0</span>, y: <span class="number">0</span>, width: <span class="number">20</span>, height: <span class="number">20</span>)</div><div class="line"><span class="keyword">let</span> point = <span class="type">CGPoint</span>(x: <span class="number">0</span>, y: <span class="number">0</span>)</div><div class="line"><span class="keyword">let</span> size = <span class="type">CGSize</span>(width: <span class="number">20</span>, height: <span class="number">20</span>)</div></pre></td></tr></table></figure></p>
<h3 id="移除了API中多余的单词"><a href="#移除了API中多余的单词" class="headerlink" title="移除了API中多余的单词"></a>移除了API中多余的单词</h3><p>XCPlaygroundPage.currentPage 改为 PlaygroundPage.current<br>button.setTitle(forState) 改为 button.setTitle(for)<br>button.addTarget(action, forControlEvents) 改为 button.addTarget(action, for)</p>
<p>arr.minElement() 改为 arr.min()<br>arr.maxElement() 改为 arr.max()<br>attributedString.appendAttributedString(anotherString) 改为 attributedString.append(anotherString)<br>names.insert(“Jane”, atIndex: 0) 改为 names.insert(“Jane”, at: 0)</p>
<p>NSBundle.mainBundle() 改为 Bundle.main<br>UIDevice.currentDevice() 改为 UIDevice.current<br>NSData(contentsOfURL) 改为 Data(contentsOf)<br>NSJSONSerialization.JSONObjectWithData() 改为 JSONSerialization.jsonObject(with)<br>UIColor.blueColor() 改为 UIColor.blue</p>
<h3 id="枚举成员变成小写字母开头"><a href="#枚举成员变成小写字母开头" class="headerlink" title="枚举成员变成小写字母开头"></a>枚举成员变成小写字母开头</h3><p>Swift 3 将枚举成员当做属性来看，所以现在使用小写字母开头而不是以前的大写字母。<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">.system <span class="comment">//过去是：.System</span></div><div class="line">.touchUpInside <span class="comment">//过去是：.TouchUpInside</span></div><div class="line">.fillStroke <span class="comment">//过去是：.FillStroke</span></div><div class="line">.cgColor <span class="comment">//过去是：.CGColor</span></div></pre></td></tr></table></figure></p>
<h3 id="discardableResult"><a href="#discardableResult" class="headerlink" title="@discardableResult"></a>@discardableResult</h3><p>在 Swift 3 中，如果一个方法有返回值。而调用的时候没有接收该方法的返回值，Xcode 会报出警告，告诉你这可能会存在潜在问题。<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> UIKit</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ViewController</span>: <span class="title">UIViewController</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">viewDidLoad</span><span class="params">()</span></span> &#123;</div><div class="line">        <span class="keyword">super</span>.viewDidLoad()</div><div class="line"></div><div class="line">        printMessage(message: <span class="string">"Hello Swift 3!"</span>)</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @discardableResult</div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">printMessage</span><span class="params">(message: String)</span></span> -&gt; <span class="type">String</span> &#123;</div><div class="line">        <span class="keyword">let</span> outputMessage = <span class="string">"Output : <span class="subst">\(message)</span>"</span></div><div class="line">        <span class="keyword">return</span> outputMessage</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">didReceiveMemoryWarning</span><span class="params">()</span></span> &#123;</div><div class="line">        <span class="keyword">super</span>.didReceiveMemoryWarning()</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>以上整理来自<a href="http://www.hangge.com/blog/cache/detail_1370.html" target="_blank" rel="external">航歌个人博客</a>,查看更全的Swift3.0新特性可访问<a href="https://realm.io/cn/news/appbuilders-daniel-steinberg-whats-new-swift-3/" target="_blank" rel="external">realm</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[企业分发的项目安装使用方法]]></title>
      <url>https://xiaoxionglaoshi.github.io/2016/11/05/%E4%BC%81%E4%B8%9A%E9%A1%B9%E7%9B%AE%E4%BF%A1%E4%BB%BB/</url>
      <content type="html"><![CDATA[<p>由于之前做的项目有的是用企业证书打包的,走的是企业分发的通道,iOS9之后打开的时候不在有信任这一选项,所以很多用户一时还不知道该怎么设置,这里介绍一下打开企业应用的流程</p>
<a id="more"></a>
<h3 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h3><blockquote>
<p>苹果的企业开发证书，可以不经app store,直接发布到自己的网站上。其他人可以直接下载安装。但前提要用苹果自带的浏览器（safari)才能下载，其他浏览器不能识别该协议。</p>
<p>由于iOS9增强了企业版开发者证书的验证规则，因此iOS9需要用户手动信任企业证书，才能正常使用。默认情况下，打开企业证书打包的app是这样的情况。 </p>
</blockquote>
<p><img src="https://github.com/626600815/anzhuangqiyeban/blob/master/img/1.png?raw=true" alt="image"></p>
<h3 id="企业证书验证步骤介绍"><a href="#企业证书验证步骤介绍" class="headerlink" title="企业证书验证步骤介绍"></a>企业证书验证步骤介绍</h3><blockquote>
<p>“设置”-&gt;”通用”-&gt;”描述文件”-&gt;［找到对应的证书］-&gt;信用证书</p>
</blockquote>
<h4 id="设置步骤"><a href="#设置步骤" class="headerlink" title="设置步骤"></a>设置步骤</h4><h4 id="打开“设置”"><a href="#打开“设置”" class="headerlink" title="打开“设置”"></a>打开“设置”</h4><p><img src="https://github.com/626600815/anzhuangqiyeban/blob/master/img/2.png?raw=true" alt="image"></p>
<h4 id="设置"><a href="#设置" class="headerlink" title="设置"></a>设置</h4><blockquote>
<p>找到“通用”－“描述文件” </p>
</blockquote>
<p><img src="https://github.com/626600815/anzhuangqiyeban/blob/master/img/3.png?raw=true" alt="image"></p>
<blockquote>
<p>通用－描述文件<br>选择对应的企业证书，如以下企业证书： </p>
</blockquote>
<p><img src="https://github.com/626600815/anzhuangqiyeban/blob/master/img/4.png?raw=true" alt="image"></p>
<blockquote>
<p>信用此证书 </p>
</blockquote>
<p><img src="https://github.com/626600815/anzhuangqiyeban/blob/master/img/5.png?raw=true" alt="image"></p>
<h4 id="重新打开"><a href="#重新打开" class="headerlink" title="重新打开"></a>重新打开</h4>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[卡片动画]]></title>
      <url>https://xiaoxionglaoshi.github.io/2016/11/03/%E5%8D%A1%E7%89%87%E5%8A%A8%E7%94%BB/</url>
      <content type="html"><![CDATA[<p>现在许多应用的信息展示用到了卡片式的样式,开源代码也很多了,其主要是应用了UICollectionView的布局定制,自定义UICollectionViewFlowLayout实现的,这里具体来记录一下常见的实现过程<br><a id="more"></a></p>
<h3 id="添加UICollectionView到界面上"><a href="#添加UICollectionView到界面上" class="headerlink" title="添加UICollectionView到界面上"></a>添加UICollectionView到界面上</h3><h4 id="定义Collectionview"><a href="#定义Collectionview" class="headerlink" title="定义Collectionview"></a>定义Collectionview</h4><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">createCollectionView</span><span class="params">()</span></span> &#123;</div><div class="line">    collectionView = <span class="type">UICollectionView</span>(frame: <span class="type">CGRect</span>(x:<span class="number">0</span>, y:<span class="number">100</span>, width:<span class="type">SCREEN_WIDTH</span>, height:<span class="number">200</span>), collectionViewLayout: layout)</div><div class="line">    collectionView.backgroundColor = <span class="type">UIColor</span>.clear</div><div class="line">    collectionView.collectionViewLayout = layout</div><div class="line">    <span class="comment">// 不显示水平方向的横条</span></div><div class="line">    collectionView.showsHorizontalScrollIndicator = <span class="literal">false</span></div><div class="line">    <span class="comment">// 实现代理</span></div><div class="line">    collectionView.delegate = <span class="keyword">self</span></div><div class="line">    collectionView.dataSource = <span class="keyword">self</span></div><div class="line">    collectionView.register(<span class="type">DNViewCell</span>.<span class="keyword">self</span>, forCellWithReuseIdentifier: cellIdentifier)</div><div class="line">    collectionView.reloadData()</div><div class="line">    <span class="keyword">self</span>.view.addSubview(collectionView)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="懒加载自定义的UICollectionViewFlowLayout-稍后实现"><a href="#懒加载自定义的UICollectionViewFlowLayout-稍后实现" class="headerlink" title="懒加载自定义的UICollectionViewFlowLayout(稍后实现)"></a>懒加载自定义的UICollectionViewFlowLayout(稍后实现)</h4><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">lazy</span> <span class="keyword">var</span> layout: <span class="type">DNFlowLayout</span> = &#123;</div><div class="line">    <span class="keyword">let</span> lo = <span class="type">DNFlowLayout</span>()</div><div class="line">    <span class="comment">// 滚动方向 水平</span></div><div class="line">    lo.scrollDirection = .horizontal</div><div class="line">    <span class="comment">// 最小行间距</span></div><div class="line">    lo.minimumLineSpacing = <span class="number">20</span></div><div class="line">    <span class="comment">// 上下左右间距</span></div><div class="line">    lo.sectionInset = <span class="type">UIEdgeInsetsMake</span>(<span class="number">0</span>, <span class="type">LAYOUT_INSET</span>, <span class="number">0</span>, <span class="type">LAYOUT_INSET</span>)</div><div class="line">    <span class="comment">// cell大小</span></div><div class="line">    lo.itemSize = <span class="type">CGSize</span>(width: <span class="type">CELL_WIDTH</span>, height: <span class="type">CELL_WIDTH</span>)</div><div class="line"></div><div class="line">    <span class="keyword">return</span> lo</div><div class="line">&#125;()</div></pre></td></tr></table></figure>
<h4 id="实现CollectionView代理"><a href="#实现CollectionView代理" class="headerlink" title="实现CollectionView代理"></a>实现CollectionView代理</h4><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">extension</span> <span class="title">ViewController</span>: <span class="title">UICollectionViewDelegate</span>, <span class="title">UICollectionViewDataSource</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">collectionView</span><span class="params">(<span class="number">_</span> collectionView: UICollectionView, numberOfItemsInSection section: Int)</span></span> -&gt; <span class="type">Int</span> &#123;</div><div class="line">        <span class="keyword">return</span> <span class="number">20</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">collectionView</span><span class="params">(<span class="number">_</span> collectionView: UICollectionView, cellForItemAt indexPath: IndexPath)</span></span> -&gt; <span class="type">UICollectionViewCell</span> &#123;</div><div class="line">        <span class="keyword">let</span> cell = <span class="keyword">self</span>.collectionView.dequeueReusableCell(withReuseIdentifier: cellIdentifier, <span class="keyword">for</span>: indexPath) <span class="keyword">as</span>! <span class="type">DNViewCell</span></div><div class="line">        cell.contentView.backgroundColor = <span class="type">UIColor</span>.red</div><div class="line">        <span class="keyword">return</span> cell</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">collectionView</span><span class="params">(<span class="number">_</span> collectionView: UICollectionView, didSelectItemAt indexPath: IndexPath)</span></span> &#123;</div><div class="line">        <span class="built_in">print</span>(indexPath.item)</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>通过上述代码可以实现简单的collectionview展示如下</p>
</blockquote>
<p><img src="https://github.com/xiaoxionglaoshi/DNAnimationCard/blob/master/1.png?raw=true" alt="image"></p>
<blockquote>
<p>接下来,我们要实现过度动画效果,通过定制UICollectionViewFlowLayout来实现,借鉴借鉴别人写的就偷偷懒了</p>
</blockquote>
<h4 id="自定义UICollectionViewFlowLayout"><a href="#自定义UICollectionViewFlowLayout" class="headerlink" title="自定义UICollectionViewFlowLayout"></a>自定义UICollectionViewFlowLayout</h4><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">DNFlowLayout</span>: <span class="title">UICollectionViewFlowLayout</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">targetContentOffset</span><span class="params">(forProposedContentOffset proposedContentOffset: CGPoint, withScrollingVelocity velocity: CGPoint)</span></span> -&gt; <span class="type">CGPoint</span> &#123;</div><div class="line">        <span class="comment">// 当前处理器能处理的最大浮点数</span></div><div class="line">        <span class="keyword">var</span> offsetAdjustment = <span class="type">CGFloat</span>(<span class="type">MAXFLOAT</span>)</div><div class="line">        <span class="comment">// collectionView落在屏幕中点的x坐标</span></div><div class="line">        <span class="keyword">let</span> horizontalCenter = proposedContentOffset.x + (<span class="keyword">self</span>.collectionView!.bounds.width / <span class="number">2.0</span>)</div><div class="line">        <span class="keyword">let</span> targetRect = <span class="type">CGRect</span>(x: proposedContentOffset.x, y: <span class="number">0.0</span>, width:  <span class="keyword">self</span>.collectionView!.bounds.size.width, height: <span class="keyword">self</span>.collectionView!.bounds.size.height)</div><div class="line">        <span class="comment">// 目标区域中包含的cell</span></div><div class="line">        <span class="keyword">let</span> array = <span class="keyword">super</span>.layoutAttributesForElements(<span class="keyword">in</span>: targetRect) <span class="keyword">as</span> [<span class="type">UICollectionViewLayoutAttributes</span>]!</div><div class="line">        <span class="keyword">for</span> layoutAttributes <span class="keyword">in</span> array!&#123;</div><div class="line">            <span class="keyword">let</span> itemHorizontalCenter = layoutAttributes.center.x</div><div class="line">            <span class="comment">//ABS求绝对值</span></div><div class="line">            <span class="keyword">if</span>(<span class="built_in">abs</span>(itemHorizontalCenter-horizontalCenter) &lt; <span class="built_in">abs</span>(offsetAdjustment))&#123;</div><div class="line">            <span class="comment">// 比较谁离中心点更近</span></div><div class="line">                offsetAdjustment = itemHorizontalCenter-horizontalCenter</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="comment">// 返回collectionView最终停留的位置</span></div><div class="line">        <span class="keyword">return</span> <span class="type">CGPoint</span>(x: proposedContentOffset.x + offsetAdjustment, y: proposedContentOffset.y)</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 垂直缩放除以系数</span></div><div class="line">    <span class="keyword">let</span> <span class="type">ActiveDistance</span> : <span class="type">CGFloat</span> = <span class="number">350</span></div><div class="line">    <span class="comment">// 缩放系数 越大缩放越大</span></div><div class="line">    <span class="keyword">let</span> <span class="type">ScaleFactor</span> : <span class="type">CGFloat</span> = <span class="number">0.25</span></div><div class="line"></div><div class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">layoutAttributesForElements</span><span class="params">(<span class="keyword">in</span> rect: CGRect)</span></span> -&gt; [<span class="type">UICollectionViewLayoutAttributes</span>]? &#123;</div><div class="line">        <span class="comment">// rect范围内的cell视图</span></div><div class="line">        <span class="keyword">let</span> array = <span class="keyword">super</span>.layoutAttributesForElements(<span class="keyword">in</span>: rect)</div><div class="line">        <span class="keyword">var</span> visibleRect = <span class="type">CGRect</span>()</div><div class="line">        visibleRect.origin = <span class="keyword">self</span>.collectionView!.contentOffset</div><div class="line">        visibleRect.size = <span class="keyword">self</span>.collectionView!.bounds.size</div><div class="line">        <span class="keyword">for</span> attributes <span class="keyword">in</span> array!&#123;</div><div class="line">            <span class="keyword">let</span> <span class="built_in">distance</span> = visibleRect.midX - attributes.center.x</div><div class="line">            <span class="keyword">let</span> normalizedDistance = <span class="built_in">distance</span>/<span class="type">ActiveDistance</span></div><div class="line">            <span class="keyword">let</span> zoom = <span class="number">1</span> - <span class="type">ScaleFactor</span>*(<span class="built_in">abs</span>(normalizedDistance))</div><div class="line">            <span class="keyword">let</span> alpha = <span class="number">1</span> - <span class="built_in">abs</span>(normalizedDistance)</div><div class="line">            <span class="comment">// SX：X轴缩放   SY：Y轴缩放</span></div><div class="line">            attributes.transform3D = <span class="type">CATransform3DMakeScale</span>(<span class="number">1.0</span>, zoom, <span class="number">1.0</span>)</div><div class="line">            attributes.alpha = alpha</div><div class="line">            attributes.zIndex = <span class="number">1</span></div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> array</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">shouldInvalidateLayout</span><span class="params">(forBoundsChange newBounds: CGRect)</span></span> -&gt; <span class="type">Bool</span> &#123;</div><div class="line">        <span class="comment">// 滑动放大缩小 需要实时刷新layout</span></div><div class="line">        <span class="keyword">return</span> <span class="literal">true</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>实现后的效果</p>
</blockquote>
<p><img src="https://github.com/xiaoxionglaoshi/DNAnimationCard/blob/master/2.gif?raw=true" alt="image"></p>
<p><a href="https://github.com/xiaoxionglaoshi/DNAnimationCard" target="_blank" rel="external">源码下载</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[横竖屏控制]]></title>
      <url>https://xiaoxionglaoshi.github.io/2016/11/01/%E6%A8%AA%E7%AB%96%E5%B1%8F%E6%8E%A7%E5%88%B6/</url>
      <content type="html"><![CDATA[<p>许多应用都支持横竖屏旋转,因此就有了每个界面需要能够自由控制界面方向的需求,我们以最常见的Navi+Tabbar为例,实现该种需求<br><a id="more"></a></p>
<h3 id="导航控制器中设置"><a href="#导航控制器中设置" class="headerlink" title="导航控制器中设置"></a>导航控制器中设置</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">DNNavigationController</span>: <span class="title">UINavigationController</span> </span>&#123;</div><div class="line">    <span class="keyword">override</span> <span class="keyword">var</span> shouldAutorotate: <span class="type">Bool</span> &#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">self</span>.topViewController!.shouldAutorotate</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">override</span> <span class="keyword">var</span> supportedInterfaceOrientations: <span class="type">UIInterfaceOrientationMask</span> &#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">self</span>.topViewController!.supportedInterfaceOrientations</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">override</span> <span class="keyword">var</span> preferredStatusBarStyle: <span class="type">UIStatusBarStyle</span> &#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">self</span>.topViewController!.preferredStatusBarStyle</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="TabBar设置"><a href="#TabBar设置" class="headerlink" title="TabBar设置"></a>TabBar设置</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">DNTabBarViewController</span>: <span class="title">UITabBarController</span> </span>&#123;</div><div class="line">    <span class="keyword">override</span> <span class="keyword">var</span> shouldAutorotate: <span class="type">Bool</span> &#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">self</span>.selectedViewController!.shouldAutorotate</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">override</span> <span class="keyword">var</span> supportedInterfaceOrientations: <span class="type">UIInterfaceOrientationMask</span> &#123;</div><div class="line">        <span class="keyword">return</span> (<span class="keyword">self</span>.selectedViewController?.supportedInterfaceOrientations) ?? .all</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="在要控制的界面中实现"><a href="#在要控制的界面中实现" class="headerlink" title="在要控制的界面中实现"></a>在要控制的界面中实现</h3><blockquote>
<p>现在大部分应用界面还都是以竖屏为主,最好定义一个ViewController的基类,在需要支持横竖屏的类里再重写改方法</p>
</blockquote>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">override</span> <span class="keyword">var</span> supportedInterfaceOrientations: <span class="type">UIInterfaceOrientationMask</span> &#123;</div><div class="line">    <span class="keyword">return</span> .portrait</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">override</span> <span class="keyword">var</span> shouldAutorotate: <span class="type">Bool</span> &#123;</div><div class="line">    <span class="keyword">return</span> <span class="literal">true</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><blockquote>
<p>只是实现这些的话,在plus手机中可能会出现方向混乱的情况,尤其是手机横屏的时候进入,但是界面只支持竖屏,解决这一问题我们需要在应用初始化的时候定义方向,一定要在创建window之前定义</p>
</blockquote>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">application</span><span class="params">(<span class="number">_</span> application: UIApplication, didFinishLaunchingWithOptions launchOptions: [UIApplicationLaunchOptionsKey: Any]?)</span></span> -&gt; <span class="type">Bool</span> &#123;</div><div class="line">    <span class="comment">// 初始化屏幕方向</span></div><div class="line">    <span class="type">UIApplication</span>.shared.setStatusBarOrientation(.portrait, animated: <span class="literal">true</span>)</div><div class="line"></div><div class="line">    <span class="comment">// 创建window</span></div><div class="line">    <span class="keyword">self</span>.window = <span class="type">UIWindow</span>(frame: <span class="type">UIScreen</span>.main.bounds)</div><div class="line">    <span class="keyword">self</span>.window?.makeKeyAndVisible()</div><div class="line">    <span class="keyword">self</span>.window?.backgroundColor = <span class="type">UIColor</span>.white</div><div class="line">    <span class="keyword">return</span> <span class="literal">true</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[textField输入中文文字下沉问题]]></title>
      <url>https://xiaoxionglaoshi.github.io/2016/10/31/textField%E9%97%AE%E9%A2%98001/</url>
      <content type="html"><![CDATA[<p>当我们用storyboard创建一个textfield的时候,输入中文时文字会往下偏移,输入英文时一切正常<br><a id="more"></a></p>
<p>解决其实很简单,设置一下textfield的clearButtonMode就行了<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">textField.clearButtonMode = .whileEditing</div></pre></td></tr></table></figure></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Xcode8注释失效]]></title>
      <url>https://xiaoxionglaoshi.github.io/2016/10/29/Xcode8%E6%B3%A8%E9%87%8A%E5%A4%B1%E6%95%88/</url>
      <content type="html"><![CDATA[<p>每次升级Xcode对于插件来说都是一次灾难,总是会失效,这次Xcode8也不例外,不过类似VVDocument注释功能被苹果自己添加进来了,不用再用第三方的了</p>
<a id="more"></a>
<h3 id="Xcode8自带的注释快捷键是"><a href="#Xcode8自带的注释快捷键是" class="headerlink" title="Xcode8自带的注释快捷键是"></a>Xcode8自带的注释快捷键是</h3><p>单行注释: command + /<br>多行注释: command + option + /</p>
<p>下图绿框中的为注释相关设置<br><img src="https://github.com/xiaoxionglaoshi/Home/blob/master/img/3.png?raw=true" alt="image"></p>
<h3 id="如何修改快捷键"><a href="#如何修改快捷键" class="headerlink" title="如何修改快捷键"></a>如何修改快捷键</h3><p>如果觉得默认注释快捷键不是自己喜欢的组合,则可以自己改,比如我把它修改成shift + / 其是就是 ?<br><img src="https://github.com/xiaoxionglaoshi/Home/blob/master/img/4.png?raw=true" alt="image"></p>
<h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><p>在使用注释快捷键的时候可能会弹出警告如下图<br><img src="https://github.com/xiaoxionglaoshi/Home/blob/master/img/5.png?raw=true" alt="image"><br>这个通常是xcode不知道你要给谁添加注释,比如你要给一个方法添加注释,但是光标位置跟方法空了一行等</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[排序算法 Swift]]></title>
      <url>https://xiaoxionglaoshi.github.io/2016/10/27/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95-Swift/</url>
      <content type="html"><![CDATA[<p>在计算机科学与数学中，一个排序算法（英语：Sorting algorithm）是一种能将一串数据依照特定排序方式进行排列的一种算法,这里总结几个常用算法的写法,包括冒泡排序,快速排序,插入排序,选择排序.<br><a id="more"></a></p>
<h3 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">bubbleSort</span>&lt;T: Comparable&gt; <span class="params">(oArr: [T])</span></span> -&gt; [<span class="type">T</span>] &#123;</div><div class="line">    <span class="keyword">var</span> arr = oArr</div><div class="line">    <span class="keyword">for</span> outerIndex <span class="keyword">in</span> (<span class="number">1</span>...arr.<span class="built_in">count</span> - <span class="number">1</span>).reversed() &#123;</div><div class="line">        <span class="keyword">for</span> innerIndex <span class="keyword">in</span> <span class="number">0</span>..&lt;outerIndex &#123;</div><div class="line">            <span class="keyword">if</span> arr[innerIndex] &gt; arr[innerIndex + <span class="number">1</span>] &#123;</div><div class="line">                <span class="keyword">let</span> temp = arr[innerIndex]</div><div class="line">                arr[innerIndex] = arr[innerIndex + <span class="number">1</span>]</div><div class="line">                arr[innerIndex + <span class="number">1</span>] = temp</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> arr</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">extension</span> <span class="title">Array</span> </span>&#123;</div><div class="line">    <span class="keyword">var</span> decompose : (head: <span class="type">Element</span>, tail: [<span class="type">Element</span>])? &#123;</div><div class="line">    <span class="keyword">return</span> (<span class="built_in">count</span> &gt; <span class="number">0</span>) ? (<span class="keyword">self</span>[<span class="number">0</span>], <span class="type">Array</span>(<span class="keyword">self</span>[<span class="number">1</span>..&lt;<span class="built_in">count</span>])) : <span class="literal">nil</span></div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">quickSort</span>&lt;T: Comparable&gt; <span class="params">(oArr: [T])</span></span> -&gt; [<span class="type">T</span>] &#123;</div><div class="line">    <span class="keyword">let</span> arr = oArr</div><div class="line">    <span class="keyword">if</span> <span class="keyword">let</span> (pivot, rest) = arr.decompose &#123;</div><div class="line">        <span class="keyword">let</span> lesser  = rest.<span class="built_in">filter</span> &#123; $<span class="number">0</span> &lt; pivot &#125;</div><div class="line">        <span class="keyword">let</span> greater = rest.<span class="built_in">filter</span> &#123; $<span class="number">0</span> &gt;= pivot &#125;</div><div class="line">        <span class="keyword">let</span> les = <span class="built_in">quickSort</span>(oArr: lesser)</div><div class="line">        <span class="keyword">let</span> gre = <span class="built_in">quickSort</span>(oArr: greater)</div><div class="line">        <span class="keyword">return</span> les + [pivot] + gre</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="keyword">return</span> []</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">insertionSort</span>&lt;T: Comparable&gt; <span class="params">(oArr: [T])</span></span> -&gt; [<span class="type">T</span>] &#123;</div><div class="line">    <span class="keyword">var</span> arr = oArr</div><div class="line">    <span class="keyword">for</span> outerIndex <span class="keyword">in</span> <span class="number">1</span>..&lt;arr.<span class="built_in">count</span> &#123;</div><div class="line">        <span class="keyword">let</span> temp = arr[outerIndex]</div><div class="line">        <span class="keyword">var</span> innerIndex = outerIndex</div><div class="line">        <span class="keyword">while</span> innerIndex &gt; <span class="number">0</span> &amp;&amp; arr[innerIndex - <span class="number">1</span>] &gt;= temp &#123;</div><div class="line">            arr[innerIndex] = arr[innerIndex - <span class="number">1</span>]</div><div class="line">            innerIndex -= <span class="number">1</span></div><div class="line">        &#125;</div><div class="line">        arr[innerIndex] = temp</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> arr</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">selectSort</span>&lt;T: Comparable&gt; <span class="params">(oArr: [T])</span></span> -&gt; [<span class="type">T</span>] &#123;</div><div class="line">    <span class="keyword">var</span> arr = oArr</div><div class="line">    <span class="keyword">var</span> minIndex = <span class="number">0</span> <span class="comment">// 记录每次遍历的最小值位置</span></div><div class="line">    <span class="keyword">for</span> outerIndex <span class="keyword">in</span> <span class="number">0</span>..&lt;arr.<span class="built_in">count</span> &#123;</div><div class="line">        minIndex = outerIndex</div><div class="line">        <span class="keyword">for</span> innerIndex <span class="keyword">in</span> (outerIndex + <span class="number">1</span>)..&lt;arr.<span class="built_in">count</span> &#123;</div><div class="line">            <span class="keyword">if</span> arr[minIndex] &gt; arr[innerIndex] &#123;</div><div class="line">                minIndex = innerIndex <span class="comment">// 判断最小值,记住下表</span></div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span> minIndex != outerIndex &#123;</div><div class="line">                <span class="keyword">let</span> temp = arr[outerIndex]</div><div class="line">                arr[outerIndex] = arr[minIndex]</div><div class="line">                arr[minIndex] = temp</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> arr</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>更多的排序算法可以去<a href="https://zh.wikipedia.org/wiki/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95" target="_blank" rel="external">百科</a>看看</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Swift常用三方库]]></title>
      <url>https://xiaoxionglaoshi.github.io/2016/10/25/Swift%E5%B8%B8%E7%94%A8%E4%B8%89%E6%96%B9%E5%BA%93/</url>
      <content type="html"><![CDATA[<p>开发应用最不缺的就是轮子,尤其是懒得写某个效果或者功能的时候都可以拿前人写好的三方库快速开发,总结一下新项目可能会用到的三方库<br><a id="more"></a></p>
<h3 id="常用三方库"><a href="#常用三方库" class="headerlink" title="常用三方库"></a>常用三方库</h3><h4 id="网络请求"><a href="#网络请求" class="headerlink" title="网络请求"></a>网络请求</h4><blockquote>
<p><a href="https://github.com/Alamofire/Alamofire" target="_blank" rel="external">Alamofire</a> : 小星星最多的网络请求库,支持iOS9以上版本,与AFNetworking同源<br><a href="https://github.com/daltoniam/SwiftHTTPhttp://note.youdao.com/" target="_blank" rel="external">SwiftHTTP</a> : 又是一个好用的网络请求库,支持iOS8以上版本<br><a href="https://github.com/JustHTTP/Just" target="_blank" rel="external">Just</a> : 无意中发现的但是蛮好用的,支持iOS8以上版本</p>
</blockquote>
<h4 id="钥匙串"><a href="#钥匙串" class="headerlink" title="钥匙串"></a>钥匙串</h4><blockquote>
<p><a href="https://github.com/kishikawakatsumi/KeychainAccess" target="_blank" rel="external">KeychainAccess</a> : 用这东西记录用户名密码之类的挺方便的,用法也比较简单,支持iOS8以上版本</p>
</blockquote>
<h4 id="图片加载"><a href="#图片加载" class="headerlink" title="图片加载"></a>图片加载</h4><blockquote>
<p><a href="https://github.com/onevcat/Kingfisher" target="_blank" rel="external">Kingfisher</a> : 图片加载中星星最高的库,支出iOS8.0以上版本</p>
</blockquote>
<h4 id="JSON解析"><a href="#JSON解析" class="headerlink" title="JSON解析"></a>JSON解析</h4><blockquote>
<p><a href="https://github.com/SwiftyJSON/SwiftyJSON" target="_blank" rel="external">SwiftyJSON</a> : JSON数据解析利器,不用手动层层解包了,支持iOS8以上版本</p>
</blockquote>
<h4 id="视图布局"><a href="#视图布局" class="headerlink" title="视图布局"></a>视图布局</h4><blockquote>
<p><a href="https://github.com/SnapKit/SnapKit" target="_blank" rel="external">SnapKit</a> : 代码布局首选,与Masonry同源,支持iOS8以上版本</p>
</blockquote>
<h4 id="指示器"><a href="#指示器" class="headerlink" title="指示器"></a>指示器</h4><blockquote>
<p><a href="https://github.com/ninjaprox/NVActivityIndicatorView" target="_blank" rel="external">NVActivityIndicatorView</a> : 一大堆样式可以选 </p>
</blockquote>
<h4 id="本地存储"><a href="#本地存储" class="headerlink" title="本地存储"></a>本地存储</h4><blockquote>
<p><a href="https://github.com/stephencelis/SQLite.swift" target="_blank" rel="external">SQLite.swift</a> : swift中星星最高的存储库,支持iOS7以上版本<br><a href="https://github.com/radex/SwiftyUserDefaults" target="_blank" rel="external">SwiftyUserDefaults</a> : 在swift中用NSUserDefaults存储数据</p>
</blockquote>
<h4 id="控制台打印"><a href="#控制台打印" class="headerlink" title="控制台打印"></a>控制台打印</h4><blockquote>
<p><a href="https://github.com/DaveWoodCom/XCGLogger" target="_blank" rel="external">XCGLogger</a> : 花花绿绿五颜六色的打印结果最好看了,支持iOS8以上版本</p>
</blockquote>
<h4 id="相机相册图片"><a href="#相机相册图片" class="headerlink" title="相机相册图片"></a>相机相册图片</h4><blockquote>
<p><a href="https://github.com/hyperoslo/ImagePicker" target="_blank" rel="external">ImagePicker</a> : 非常精致的一个图片选择器<br><a href="https://github.com/suzuki-0000/SKPhotoBrowser" target="_blank" rel="external">SKPhotoBrowser</a> : 图片查看库</p>
</blockquote>
<h4 id="扩展类"><a href="#扩展类" class="headerlink" title="扩展类"></a>扩展类</h4><blockquote>
<p><a href="https://github.com/goktugyil/EZSwiftExtensions" target="_blank" rel="external">EZSwiftExtensions</a> : 整理的真心多</p>
</blockquote>
<h4 id="提示框"><a href="#提示框" class="headerlink" title="提示框"></a>提示框</h4><blockquote>
<p><a href="https://github.com/codestergit/SweetAlert-iOS" target="_blank" rel="external">SweetAlert-iOS</a> : 带动画的弹框,调用也简单,效果不错,支持iOS7以上版本<br><a href="https://github.com/SwiftKickMobile/SwiftMessages" target="_blank" rel="external">SwiftMessages</a> : 消息提示,到处都可以显示的横条,效果非常不错</p>
</blockquote>
<h4 id="内购"><a href="#内购" class="headerlink" title="内购"></a>内购</h4><blockquote>
<p><a href="httphttps://github.com/bizz84/SwiftyStoreKit" target="_blank" rel="external">SwiftyStoreKit</a> : 省心省时省力,内购封装</p>
</blockquote>
<h4 id="皮肤主题"><a href="#皮肤主题" class="headerlink" title="皮肤主题"></a>皮肤主题</h4><blockquote>
<p><a href="https://github.com/jiecao-fm/SwiftTheme" target="_blank" rel="external">SwiftTheme</a> :  主题/换肤, 夜间模式,支持iOS7以上版本</p>
</blockquote>
<h4 id="二维码扫描"><a href="#二维码扫描" class="headerlink" title="二维码扫描"></a>二维码扫描</h4><blockquote>
<p><a href="https://github.com/zhanghongdou/QRCodeReaderView-Swift" target="_blank" rel="external">QRCodeReaderView-Swift</a> : 基于swift语言实现二维码条形码扫描,本地相册二维码识别</p>
</blockquote>
<h4 id="指纹和手势密码"><a href="#指纹和手势密码" class="headerlink" title="指纹和手势密码"></a>指纹和手势密码</h4><blockquote>
<p><a href="https://github.com/bugaoshuni/TouchIDAndGestureLock" target="_blank" rel="external">TouchIDAndGestureLock</a> : 指纹解锁、手势解锁</p>
</blockquote>
<h4 id="通讯录"><a href="#通讯录" class="headerlink" title="通讯录"></a>通讯录</h4><blockquote>
<p><a href="https://github.com/jkpang/PPGetAddressBookSwift" target="_blank" rel="external">PPGetAddressBookSwift</a> : 获取通讯录并排序</p>
</blockquote>
<h4 id="提示框-1"><a href="#提示框-1" class="headerlink" title="提示框"></a>提示框</h4><blockquote>
<p><a href="https://github.com/codestergit/SweetAlert-iOS" target="_blank" rel="external">SweetAlert-iOS</a> : 动画提示框</p>
</blockquote>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[cocoapods使用]]></title>
      <url>https://xiaoxionglaoshi.github.io/2016/10/23/cocoapods%E4%BD%BF%E7%94%A8/</url>
      <content type="html"><![CDATA[<p>最为iOS开发的一般都知道cocoapods,在管理三方库方面还是减少不少麻烦的,之前一直用的老版本的cocoapods,升级到1.0以上版本后,写法有所改变,再总结一下用法</p>
<a id="more"></a>
<h3 id="创建项目CocoapodsDemo"><a href="#创建项目CocoapodsDemo" class="headerlink" title="创建项目CocoapodsDemo"></a>创建项目CocoapodsDemo</h3><blockquote>
<p>用Xcode创建CocoapodsDemo项目,并设置支持的最低版本</p>
</blockquote>
<h3 id="添加Podfile文件"><a href="#添加Podfile文件" class="headerlink" title="添加Podfile文件"></a>添加Podfile文件</h3><h4 id="cd到刚创建的项目的根目录下"><a href="#cd到刚创建的项目的根目录下" class="headerlink" title="cd到刚创建的项目的根目录下"></a>cd到刚创建的项目的根目录下</h4><h4 id="创建Podfile"><a href="#创建Podfile" class="headerlink" title="创建Podfile"></a>创建Podfile</h4><blockquote>
<p>$ pod init</p>
</blockquote>
<p>这时候查看项目文件夹会发现多出一个Podfile文件<br><img src="https://github.com/xiaoxionglaoshi/Home/blob/master/img/9.png?raw=true" alt="image"></p>
<h4 id="打开该文件"><a href="#打开该文件" class="headerlink" title="打开该文件"></a>打开该文件</h4><p>终端执行命令</p>
<blockquote>
<p>$ vim Podfile<br>或者<br>$ open -e podfile</p>
</blockquote>
<p>更推荐后者,vim编辑真心难用,需要一行一样的跳<br>打开后我们会看到里面已经为我们创建了不少东西,省的自己写了<br><img src="https://github.com/xiaoxionglaoshi/Home/blob/master/img/10.png?raw=true" alt="image"></p>
<p>把碍眼的注释都删掉<br>如果你在创建应用的时候勾选了Tests和UITest,则会同时创建出他们对应的target,我们暂时不用,也直接删了就行了,什么时候用到什么时候在加上<br><img src="https://github.com/xiaoxionglaoshi/Home/blob/master/img/11.png?raw=true" alt="image"><br>这就顺眼多了</p>
<h3 id="添加需要的三方库"><a href="#添加需要的三方库" class="headerlink" title="添加需要的三方库"></a>添加需要的三方库</h3><p>以添加Alamofire为例</p>
<h4 id="首先查看Alamofire目前的版本-有三种"><a href="#首先查看Alamofire目前的版本-有三种" class="headerlink" title="首先查看Alamofire目前的版本,有三种"></a>首先查看Alamofire目前的版本,有三种</h4><blockquote>
<p>1.去<a href="https://github.com/Alamofire/Alamofire" target="_blank" rel="external">github</a>上看看文档介绍<br>2.去<a href="https://cocoapods.org" target="_blank" rel="external">Cocoapods官网</a>上查查文档<br>3.在终端上通过命令查询 $ pod search alamofire</p>
</blockquote>
<p>前两者都能查到最新版本,第三种有可能查不到最新的,需要更新本地库</p>
<blockquote>
<p>$ pod repo update</p>
</blockquote>
<p>接下来按照查询到的方法在Podfile中书写<br><img src="https://github.com/xiaoxionglaoshi/Home/blob/master/img/12.png?raw=true" alt="image"></p>
<p>关闭编辑页面</p>
<h4 id="拉取三方库资源"><a href="#拉取三方库资源" class="headerlink" title="拉取三方库资源"></a>拉取三方库资源</h4><blockquote>
<p>$ pod install</p>
</blockquote>
<p><img src="https://github.com/xiaoxionglaoshi/Home/blob/master/img/13.png?raw=true" alt="image"></p>
<p>这时候打开项目文件,会发现多出了几个文件<br><img src="https://github.com/xiaoxionglaoshi/Home/blob/master/img/14.png?raw=true" alt="image"></p>
<p>打开.workspace文件即可看到多处了一Pods工程<br><img src="https://github.com/xiaoxionglaoshi/Home/blob/master/img/15.png?raw=true" alt="image"></p>
<p>以后要是需要更新三方库只需要执行命令</p>
<blockquote>
<p>$ pod update</p>
</blockquote>
<p>到这里cocoapods使用就结束了</p>
<p>接下来项目要是需要用到Pods里的三方库只需要引用头文件就能用了</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[cocoapods升级]]></title>
      <url>https://xiaoxionglaoshi.github.io/2016/10/21/cocoapods%E5%8D%87%E7%BA%A7/</url>
      <content type="html"><![CDATA[<p>swift3.0许多库对cocoapods的版本也有要求,这使得我们不得不升级cocoapods,由于手边项目较多,一直没升级cocoapods,主要是懒得改,这次有时间了,就把它给升了吧.<br><a id="more"></a></p>
<h3 id="切换gem源"><a href="#切换gem源" class="headerlink" title="切换gem源"></a>切换gem源</h3><blockquote>
<p>$ gem sources –remove <a href="https://rubygems.org/" target="_blank" rel="external">https://rubygems.org/</a><br>$ gem source -a <a href="https://gems.ruby-china.org/" target="_blank" rel="external">https://gems.ruby-china.org/</a></p>
</blockquote>
<h4 id="查看是否切换成功"><a href="#查看是否切换成功" class="headerlink" title="查看是否切换成功"></a>查看是否切换成功</h4><blockquote>
<p>$ gem source -l</p>
</blockquote>
<p>当现实为下图则为成功<br><img src="https://github.com/xiaoxionglaoshi/Home/blob/master/img/6.png?raw=true" alt="image"></p>
<h3 id="升级cocoapods"><a href="#升级cocoapods" class="headerlink" title="升级cocoapods"></a>升级cocoapods</h3><blockquote>
<p>$ sudo gem install -n /usr/local/bin cocoapods<br>或者试试下面的命令,这是更新推荐提示的命令<br>$ sudo gem install cocoapods –pre</p>
</blockquote>
<p>这时候会出现一大堆输出等结束</p>
<h4 id="查看版本"><a href="#查看版本" class="headerlink" title="查看版本"></a>查看版本</h4><blockquote>
<p>$ pod –version</p>
</blockquote>
<p><img src="https://github.com/xiaoxionglaoshi/Home/blob/master/img/7.png?raw=true" alt="image"><br>欧 买噶的,居然没有更新</p>
<h4 id="不用紧张-可能是gem太老了-更新一下"><a href="#不用紧张-可能是gem太老了-更新一下" class="headerlink" title="不用紧张,可能是gem太老了,更新一下"></a>不用紧张,可能是gem太老了,更新一下</h4><blockquote>
<p>$ gem update –system</p>
</blockquote>
<p>估计得等一会,然后又输出一大堆东西等结束</p>
<h4 id="再次执行"><a href="#再次执行" class="headerlink" title="再次执行"></a>再次执行</h4><blockquote>
<p>$ sudo gem install -n /usr/local/bin cocoapods<br>$ pod –version</p>
</blockquote>
<p>看到下面输出结果 ~~泪奔啊终于更新了<br><img src="https://github.com/xiaoxionglaoshi/Home/blob/master/img/8.png?raw=true" alt="image"></p>
<h3 id="好了升级完成-接下来更新本地库-耐心等待即可"><a href="#好了升级完成-接下来更新本地库-耐心等待即可" class="headerlink" title="好了升级完成,接下来更新本地库,耐心等待即可"></a>好了升级完成,接下来更新本地库,耐心等待即可</h3><blockquote>
<p>$ pod repo update </p>
</blockquote>
<p>更新完之后可能会出现</p>
<blockquote>
<p>CocoaPods 1.2.0.beta.1 is available.</p>
</blockquote>
<p>这是发现还有新版本,不过是beta版本,要不要再升级,如果要就按照它提示的命令执行,否则就不用管它,beta一般就不升了,毕竟不是正式版,难免会有一些BUG</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[随机数]]></title>
      <url>https://xiaoxionglaoshi.github.io/2016/10/19/%E9%9A%8F%E6%9C%BA%E6%95%B0/</url>
      <content type="html"><![CDATA[<h4 id="取10以内随机数"><a href="#取10以内随机数" class="headerlink" title="取10以内随机数"></a>取10以内随机数</h4><p>arc4random() % 10<br><a id="more"></a></p>
<p>据说arc4random在32位iPhone上有时程序崩溃,用arc4random_uniform也行<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> maxValue: <span class="type">UInt32</span> = <span class="number">10</span></div><div class="line"><span class="built_in">print</span>(<span class="type">Int</span>(arc4random_uniform(maxValue)))</div></pre></td></tr></table></figure></p>
<p>封装一下去随机数的方法<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">randomInRange</span><span class="params">(range: CountableClosedRange&lt;Int&gt;)</span></span> -&gt; <span class="type">Int</span> &#123;</div><div class="line">    <span class="keyword">let</span> <span class="built_in">count</span> = <span class="type">UInt32</span>(range.upperBound - range.lowerBound)</div><div class="line">    <span class="keyword">return</span> <span class="type">Int</span>(arc4random_uniform(<span class="built_in">count</span>)) + range.lowerBound</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>调用<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">取<span class="number">1</span>到<span class="number">10</span>之间的随机数</div><div class="line">randomInRange(range: (<span class="number">1</span>...<span class="number">10</span>))</div></pre></td></tr></table></figure></p>
<h4 id="返回随机颜色"><a href="#返回随机颜色" class="headerlink" title="返回随机颜色"></a>返回随机颜色</h4><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">extension</span> <span class="title">UIColor</span> </span>&#123;</div><div class="line">    open <span class="class"><span class="keyword">class</span> <span class="title">var</span> <span class="title">randomColor</span>: <span class="title">UIColor</span></span>&#123;</div><div class="line">        <span class="keyword">get</span> &#123;</div><div class="line">            <span class="keyword">let</span> red = <span class="type">CGFloat</span>(arc4random()%<span class="number">256</span>)/<span class="number">255.0</span></div><div class="line">            <span class="keyword">let</span> green = <span class="type">CGFloat</span>(arc4random()%<span class="number">256</span>)/<span class="number">255.0</span></div><div class="line">            <span class="keyword">let</span> blue = <span class="type">CGFloat</span>(arc4random()%<span class="number">256</span>)/<span class="number">255.0</span></div><div class="line">            <span class="keyword">return</span> <span class="type">UIColor</span>(red: red, green: green, blue: blue, alpha: <span class="number">1.0</span>)</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[本地化存储之SQLite.swift使用]]></title>
      <url>https://xiaoxionglaoshi.github.io/2016/10/17/%E6%9C%AC%E5%9C%B0%E5%8C%96%E5%AD%98%E5%82%A8%E4%B9%8BSQLite-swift%E4%BD%BF%E7%94%A8/</url>
      <content type="html"><![CDATA[<p>本地存储功能是APP常用功能,也是必备技能,OC时代,我们有很好用的FMDB三方库可以轻松实现本地化存储,Swift同样有不错的替代品,这里主要介绍的是<a href="https://github.com/stephencelis/SQLite.swift" target="_blank" rel="external">SQLite.swift</a>三方库,用起来也是很简单,这里以存储用户信息为例.<br><a id="more"></a></p>
<h3 id="创建数据库文件"><a href="#创建数据库文件" class="headerlink" title="创建数据库文件"></a>创建数据库文件</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">mutating</span> <span class="function"><span class="keyword">func</span> <span class="title">createdsqlite3</span><span class="params">()</span></span> &#123;</div><div class="line">    <span class="comment">// 设置数据库路径 </span></div><div class="line">    <span class="keyword">let</span> sqlFilePath = <span class="type">NSHomeDirectory</span>() + <span class="string">"/Documents/usersinfodb.sqlite3"</span></div><div class="line">    <span class="keyword">do</span> &#123;</div><div class="line">        db = <span class="keyword">try</span> <span class="type">Connection</span>(sqlFilePath)</div><div class="line">        <span class="keyword">try</span> db.run(users.create(block: &#123; (table) <span class="keyword">in</span></div><div class="line">        table.column(id, primaryKey: <span class="literal">true</span>)</div><div class="line">        table.column(username)</div><div class="line">        table.column(userage)</div><div class="line">        table.column(usersex)</div><div class="line">        table.column(userid)</div><div class="line">        table.column(useremail)</div><div class="line">        &#125;))</div><div class="line">    &#125; <span class="keyword">catch</span> &#123;</div><div class="line">        <span class="built_in">print</span>(<span class="string">"创建数据库出错: <span class="subst">\(error)</span>"</span>)</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="添加用户信息"><a href="#添加用户信息" class="headerlink" title="添加用户信息"></a>添加用户信息</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">insertUser</span><span class="params">(userModel: DNUsersModel)</span></span> &#123;</div><div class="line">    <span class="comment">// 用户信息中没有ID就不存入数据库(被列为无效用户)</span></div><div class="line">    <span class="keyword">guard</span> <span class="keyword">let</span> userId = userModel.userid <span class="keyword">else</span> &#123;</div><div class="line">        <span class="built_in">print</span>(<span class="string">"没有ID信息,视为无效用户"</span>)</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">// 查找数据库中是否有该用户,如果有则执行修改操作</span></div><div class="line">    <span class="keyword">guard</span> readUser(userId: userId) == <span class="literal">nil</span> <span class="keyword">else</span> &#123;</div><div class="line">        <span class="built_in">print</span>(<span class="string">"已存在改用户,接下来更新此用户数据"</span>)</div><div class="line">        updateUser(userId: userId, userModel: userModel)</div><div class="line">        <span class="keyword">return</span></div><div class="line">    &#125;</div><div class="line">    <span class="keyword">let</span> insert = users.insert(username &lt;- userModel.username,</div><div class="line">                               userage &lt;- userModel.userage,</div><div class="line">                               usersex &lt;- userModel.usersex,</div><div class="line">                                userid &lt;- userModel.userid,</div><div class="line">                             useremail &lt;- userModel.useremail)</div><div class="line"></div><div class="line">    <span class="keyword">do</span> &#123;</div><div class="line">        <span class="keyword">let</span> num = <span class="keyword">try</span> db.run(insert)</div><div class="line">        <span class="built_in">print</span>(num)</div><div class="line">    &#125; <span class="keyword">catch</span> &#123;</div><div class="line">        <span class="built_in">print</span>(<span class="string">"增加用户到数据库出错: <span class="subst">\(error)</span>"</span>)</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="删除指定用户信息"><a href="#删除指定用户信息" class="headerlink" title="删除指定用户信息"></a>删除指定用户信息</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">deleteUser</span><span class="params">(userId: String)</span></span> &#123;</div><div class="line">    <span class="keyword">let</span> currUser = users.<span class="built_in">filter</span>(userid == userId)</div><div class="line">    <span class="keyword">do</span> &#123;</div><div class="line">        <span class="keyword">let</span> num = <span class="keyword">try</span> db.run(currUser.delete())</div><div class="line">        <span class="built_in">print</span>(num)</div><div class="line">    &#125; <span class="keyword">catch</span> &#123;</div><div class="line">        <span class="built_in">print</span>(<span class="string">"删除用户信息出错: <span class="subst">\(error)</span>"</span>)</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="更新指定用户信息"><a href="#更新指定用户信息" class="headerlink" title="更新指定用户信息"></a>更新指定用户信息</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">updateUser</span><span class="params">(userId: String, userModel: DNUsersModel)</span></span> &#123;</div><div class="line">    <span class="keyword">let</span> currUser = users.<span class="built_in">filter</span>(userid == userId)</div><div class="line">    <span class="keyword">let</span> update = currUser.update(username &lt;- userModel.username,</div><div class="line">                                  userage &lt;- userModel.userage,</div><div class="line">                                  usersex &lt;- userModel.usersex,</div><div class="line">                                   userid &lt;- userModel.userid,</div><div class="line">                                useremail &lt;- userModel.useremail)</div><div class="line">    <span class="keyword">do</span> &#123;</div><div class="line">        <span class="keyword">let</span> num = <span class="keyword">try</span> db.run(update)</div><div class="line">        <span class="built_in">print</span>(num)</div><div class="line">    &#125; <span class="keyword">catch</span> &#123;</div><div class="line">        <span class="built_in">print</span>(error)</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="更新用户名"><a href="#更新用户名" class="headerlink" title="更新用户名"></a>更新用户名</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">updateUser</span><span class="params">(userId: String, userName: String)</span></span> &#123;</div><div class="line">    <span class="keyword">let</span> currUser = users.<span class="built_in">filter</span>(userid == userId)</div><div class="line">    <span class="keyword">let</span> update = currUser.update(username &lt;- userName)</div><div class="line">    <span class="keyword">do</span> &#123;</div><div class="line">        <span class="keyword">let</span> num = <span class="keyword">try</span> db.run(update)</div><div class="line">        <span class="built_in">print</span>(num)</div><div class="line">    &#125; <span class="keyword">catch</span> &#123;</div><div class="line">        <span class="built_in">print</span>(error)</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="查询指定用户信息"><a href="#查询指定用户信息" class="headerlink" title="查询指定用户信息"></a>查询指定用户信息</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">readUser</span><span class="params">(userId: String)</span></span> -&gt; <span class="type">DNUsersModel</span>? &#123;</div><div class="line">    <span class="keyword">var</span> userModel: <span class="type">DNUsersModel</span>? = <span class="type">DNUsersModel</span>()</div><div class="line">    <span class="keyword">for</span> user <span class="keyword">in</span> <span class="keyword">try</span>! db.prepare(users) &#123;</div><div class="line">        <span class="keyword">if</span> user[userid] == userId &#123;</div><div class="line">            userModel?.username = user[username]</div><div class="line">            userModel?.userage = user[userage]</div><div class="line">            userModel?.usersex = user[usersex]</div><div class="line">            userModel?.userid = user[userid]</div><div class="line">            userModel?.useremail = user[useremail]</div><div class="line">            <span class="keyword">return</span> userModel</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="literal">nil</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="查询所有用户信息"><a href="#查询所有用户信息" class="headerlink" title="查询所有用户信息"></a>查询所有用户信息</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">readAllUsers</span><span class="params">()</span></span> -&gt; [<span class="type">DNUsersModel</span>]? &#123;</div><div class="line">    <span class="keyword">var</span> usersArr: [<span class="type">DNUsersModel</span>]? = [<span class="type">DNUsersModel</span>]()</div><div class="line">    <span class="keyword">var</span> userModel: <span class="type">DNUsersModel</span>? = <span class="type">DNUsersModel</span>()</div><div class="line">    <span class="keyword">for</span> user <span class="keyword">in</span> <span class="keyword">try</span>! db.prepare(users) &#123;</div><div class="line">        userModel?.username = user[username]</div><div class="line">        userModel?.userage = user[userage]</div><div class="line">        userModel?.usersex = user[usersex]</div><div class="line">        userModel?.userid = user[userid]</div><div class="line">        userModel?.useremail = user[useremail]</div><div class="line">        usersArr?.append(userModel!)</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> usersArr</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><a href="https://github.com/xiaoxionglaoshi/DNSQLiteDemo" target="_blank" rel="external">源码下载</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[HTML速查表]]></title>
      <url>https://xiaoxionglaoshi.github.io/2016/10/15/HTML%E9%80%9F%E6%9F%A5%E8%A1%A8/</url>
      <content type="html"><![CDATA[<p>HTML 是一种在 Web 上使用的通用标记语言。HTML 允许你格式化文本，添加图片，创建链接、输入表单、框架和表格等等，并可将之存为文本文件，浏览器即可读取和显示。</p>
<a id="more"></a>
<h3 id="HTML-基本文档"><a href="#HTML-基本文档" class="headerlink" title="HTML 基本文档"></a>HTML 基本文档</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>文档标题<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span> 可见文本... <span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="基本标签（Basic-Tags）"><a href="#基本标签（Basic-Tags）" class="headerlink" title="基本标签（Basic Tags）"></a>基本标签（Basic Tags）</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>最大的标题<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span> . . . <span class="tag">&lt;/<span class="name">h2</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span> . . . <span class="tag">&lt;/<span class="name">h3</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">h4</span>&gt;</span> . . . <span class="tag">&lt;/<span class="name">h4</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">h5</span>&gt;</span> . . . <span class="tag">&lt;/<span class="name">h5</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">h6</span>&gt;</span>最小的标题<span class="tag">&lt;/<span class="name">h6</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>这是一个段落。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span> （换行）</div><div class="line"><span class="tag">&lt;<span class="name">hr</span>&gt;</span> （水平线）</div><div class="line"><span class="comment">&lt;!-- 这是注释 --&gt;</span></div></pre></td></tr></table></figure>
<h3 id="文本格式化（Formatting）"><a href="#文本格式化（Formatting）" class="headerlink" title="文本格式化（Formatting）"></a>文本格式化（Formatting）</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">b</span>&gt;</span>粗体文本<span class="tag">&lt;/<span class="name">b</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">code</span>&gt;</span>计算机代码<span class="tag">&lt;/<span class="name">code</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">em</span>&gt;</span>强调文本<span class="tag">&lt;/<span class="name">em</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">i</span>&gt;</span>斜体文本<span class="tag">&lt;/<span class="name">i</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">kbd</span>&gt;</span>键盘输入<span class="tag">&lt;/<span class="name">kbd</span>&gt;</span> </div><div class="line"><span class="tag">&lt;<span class="name">pre</span>&gt;</span>预格式化文本<span class="tag">&lt;/<span class="name">pre</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">small</span>&gt;</span>更小的文本<span class="tag">&lt;/<span class="name">small</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">strong</span>&gt;</span>重要的文本<span class="tag">&lt;/<span class="name">strong</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">abbr</span>&gt;</span> （缩写）</div><div class="line"><span class="tag">&lt;<span class="name">address</span>&gt;</span> （联系信息）</div><div class="line"><span class="tag">&lt;<span class="name">bdo</span>&gt;</span> （文字方向）</div><div class="line"><span class="tag">&lt;<span class="name">blockquote</span>&gt;</span> （从另一个源引用的部分）</div><div class="line"><span class="tag">&lt;<span class="name">cite</span>&gt;</span> （工作的名称）</div><div class="line"><span class="tag">&lt;<span class="name">del</span>&gt;</span> （删除的文本）</div><div class="line"><span class="tag">&lt;<span class="name">ins</span>&gt;</span> （插入的文本）</div><div class="line"><span class="tag">&lt;<span class="name">sub</span>&gt;</span> （下标文本）</div><div class="line"><span class="tag">&lt;<span class="name">sup</span>&gt;</span> （上标文本）</div></pre></td></tr></table></figure>
<h3 id="链接（Links）"><a href="#链接（Links）" class="headerlink" title="链接（Links）"></a>链接（Links）</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">普通的链接： <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">" </span></span></div><div class="line">链接文本&lt;/a&gt; </div><div class="line">图像链接： &lt;a href="<span class="attr">http:</span>//<span class="attr">www.example.com</span>/"&gt;<span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"URL"</span> <span class="attr">alt</span>=<span class="string">"替换文本"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span> </div><div class="line">邮件链接： <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"mailto:webmaster@example.com"</span>&gt;</span>发送e-mail<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">书签： <span class="tag">&lt;<span class="name">a</span> <span class="attr">id</span>=<span class="string">"tips"</span>&gt;</span></div><div class="line">提示部分<span class="tag">&lt;/<span class="name">a</span>&gt;</span> <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#tips"</span>&gt;</span>跳到提示部分<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="图片（Images）"><a href="#图片（Images）" class="headerlink" title="图片（Images）"></a>图片（Images）</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"URL"</span> <span class="attr">alt</span>=<span class="string">"替换文本"</span> <span class="attr">height</span>=<span class="string">"42"</span> <span class="attr">width</span>=<span class="string">"42"</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="样式-区块（Styles-Sections）"><a href="#样式-区块（Styles-Sections）" class="headerlink" title="样式/区块（Styles/Sections）"></a>样式/区块（Styles/Sections）</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span><span class="undefined"></span></div><div class="line">    h1 &#123;color:red;&#125;</div><div class="line">    p &#123;color:blue;&#125;</div><div class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>文档中的块级元素<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span>文档中的内联元素<span class="tag">&lt;/<span class="name">span</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="无序列表"><a href="#无序列表" class="headerlink" title="无序列表"></a>无序列表</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>项目<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>项目<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="有序列表"><a href="#有序列表" class="headerlink" title="有序列表"></a>有序列表</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">ol</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>第一项<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>第二项<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">ol</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="自定义列表"><a href="#自定义列表" class="headerlink" title="自定义列表"></a>自定义列表</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dl</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">dt</span>&gt;</span>项目 1<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">dd</span>&gt;</span>描述项目 1<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">dt</span>&gt;</span>项目 2<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">dd</span>&gt;</span>描述项目 2<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dl</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="表格（Tables）"><a href="#表格（Tables）" class="headerlink" title="表格（Tables）"></a>表格（Tables）</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span>=<span class="string">"1"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>表格标题<span class="tag">&lt;/<span class="name">th</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>表格标题<span class="tag">&lt;/<span class="name">th</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>表格数据<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>表格数据<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="框架（Iframe）"><a href="#框架（Iframe）" class="headerlink" title="框架（Iframe）"></a>框架（Iframe）</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">src</span>=<span class="string">"demo_iframe.htm"</span>&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="表单（Forms）"><a href="#表单（Forms）" class="headerlink" title="表单（Forms）"></a>表单（Forms）</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"demo_form.php"</span> <span class="attr">method</span>=<span class="string">"post/get"</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"email"</span> <span class="attr">size</span>=<span class="string">"40"</span> <span class="attr">maxlength</span>=<span class="string">"50"</span>&gt;</span> </div><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"password"</span>&gt;</span> </div><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">checked</span>=<span class="string">"checked"</span>&gt;</span> </div><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">checked</span>=<span class="string">"checked"</span>&gt;</span> </div><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"Send"</span>&gt;</span> </div><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"reset"</span>&gt;</span> </div><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"hidden"</span>&gt;</span> </div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">select</span>&gt;</span> </div><div class="line"><span class="tag">&lt;<span class="name">option</span>&gt;</span>苹果<span class="tag">&lt;/<span class="name">option</span>&gt;</span> </div><div class="line"><span class="tag">&lt;<span class="name">option</span> <span class="attr">selected</span>=<span class="string">"selected"</span>&gt;</span>香蕉<span class="tag">&lt;/<span class="name">option</span>&gt;</span> </div><div class="line"><span class="tag">&lt;<span class="name">option</span>&gt;</span>樱桃<span class="tag">&lt;/<span class="name">option</span>&gt;</span> </div><div class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">textarea</span> <span class="attr">name</span>=<span class="string">"comment"</span> <span class="attr">rows</span>=<span class="string">"60"</span> <span class="attr">cols</span>=<span class="string">"20"</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span> </div><div class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="实体（Entities）"><a href="#实体（Entities）" class="headerlink" title="实体（Entities）"></a>实体（Entities）</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&amp;lt; 等同于 <span class="tag">&lt;</span></div><div class="line">&amp;<span class="attr">gt</span>; 等同于 &gt;</div><div class="line">© 等同于 ©</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Xcode8去除多余打印]]></title>
      <url>https://xiaoxionglaoshi.github.io/2016/10/13/Xcode8%E5%8E%BB%E9%99%A4%E5%A4%9A%E4%BD%99%E6%89%93%E5%8D%B0/</url>
      <content type="html"><![CDATA[<h3 id="打开路径"><a href="#打开路径" class="headerlink" title="打开路径"></a>打开路径</h3><blockquote>
<p>Product -&gt; Scheme -&gt; Edit Scheme</p>
</blockquote>
<h3 id="配置内容"><a href="#配置内容" class="headerlink" title="配置内容"></a>配置内容</h3><blockquote>
<p>OS_ACTIVITY_MODE=disable</p>
</blockquote>
<a id="more"></a>
<p><img src="https://github.com/xiaoxionglaoshi/Home/blob/master/img/1.png?raw=true" alt="image"></p>
<p><img src="https://github.com/xiaoxionglaoshi/Home/blob/master/img/2.png?raw=true" alt="image"></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Xcode8 权限配置]]></title>
      <url>https://xiaoxionglaoshi.github.io/2016/10/11/Xcode8-%E6%9D%83%E9%99%90%E9%85%8D%E7%BD%AE/</url>
      <content type="html"><![CDATA[<p>iOS10之后加强了权限管理,在使用某项系统权限的时候需要在plist中配置,如果不配置,在上传项目之后构建版本在itunes connect里可能看不到,审核也可能被拒</p>
<a id="more"></a>
<h4 id="相机权限"><a href="#相机权限" class="headerlink" title="相机权限"></a>相机权限</h4><blockquote>
<p>Privacy - Camera Usage Description 是否允许此App使用你的相机</p>
</blockquote>
<h4 id="相册权限"><a href="#相册权限" class="headerlink" title="相册权限"></a>相册权限</h4><blockquote>
<p>Privacy - Photo Library Usage Description 是否允许此App访问你的媒体资料库</p>
</blockquote>
<h4 id="定位权限"><a href="#定位权限" class="headerlink" title="定位权限"></a>定位权限</h4><blockquote>
<p>Privacy - Location When In Use Usage Description 我们需要通过您的地理位置信息获取您周边的相关数据</p>
<p>Privacy - Location Always Usage Description 我们需要通过您的地理位置信息获取您周边的相关数据</p>
</blockquote>
<h4 id="通讯录权限"><a href="#通讯录权限" class="headerlink" title="通讯录权限"></a>通讯录权限</h4><blockquote>
<p>Privacy - Contacts Usage Description 是否允许此App访问你的通讯录</p>
</blockquote>
<h4 id="麦克风权限"><a href="#麦克风权限" class="headerlink" title="麦克风权限"></a>麦克风权限</h4><blockquote>
<p>Privacy - Microphone Usage Description 是否允许此App使用你的麦克风</p>
</blockquote>
<h4 id="蓝牙权限"><a href="#蓝牙权限" class="headerlink" title="蓝牙权限"></a>蓝牙权限</h4><blockquote>
<p>Privacy - Bluetooth Peripheral Usage Description 是否许允此App使用蓝牙</p>
</blockquote>
<h4 id="语音转文字权限"><a href="#语音转文字权限" class="headerlink" title="语音转文字权限"></a>语音转文字权限</h4><blockquote>
<p>Privacy - Speech Recognition Usage Description 是否允许此App使用语音识别</p>
</blockquote>
<h4 id="日历权限"><a href="#日历权限" class="headerlink" title="日历权限"></a>日历权限</h4><blockquote>
<p>Privacy - Calendars Usage Description 是否允许此App使用日历</p>
</blockquote>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[地理定位]]></title>
      <url>https://xiaoxionglaoshi.github.io/2016/10/09/%E5%9C%B0%E7%90%86%E5%AE%9A%E4%BD%8D/</url>
      <content type="html"><![CDATA[<p>现在的app基本上都有定位功能,又得是获取左边和城市信息,又得是地图展示,这里介绍获取简单的地理位置信息功能,包括坐标,所在城市等基本信息.<br><a id="more"></a></p>
<h3 id="添加依赖库-导入头文件"><a href="#添加依赖库-导入头文件" class="headerlink" title="添加依赖库 导入头文件"></a>添加依赖库 导入头文件</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="type">CoreLocation</span>.framework</div><div class="line"></div><div class="line"><span class="keyword">import</span> CoreLocation</div><div class="line"></div><div class="line"><span class="comment">// 别忘了在plist中添加隐私权限</span></div><div class="line"><span class="type">Privacy</span> - <span class="type">Location</span> <span class="type">Always</span> <span class="type">Usage</span> <span class="type">Description</span></div><div class="line"><span class="type">Privacy</span> - <span class="type">Location</span> <span class="type">When</span> <span class="type">In</span> <span class="type">Use</span> <span class="type">Usage</span> <span class="type">Description</span></div><div class="line">都是<span class="type">String</span>类型 后面描述: 我们需要通过您的地理位置信息获取您周边的相关数据</div></pre></td></tr></table></figure>
<h3 id="初始化相关对象"><a href="#初始化相关对象" class="headerlink" title="初始化相关对象"></a>初始化相关对象</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 创建一个CLLocationManager对象</span></div><div class="line"><span class="keyword">private</span> <span class="keyword">var</span> locationManager: <span class="type">CLLocationManager</span>!</div><div class="line"><span class="comment">// 创建一个CLGeocoder对象</span></div><div class="line"><span class="keyword">private</span> <span class="keyword">var</span> geocoder: <span class="type">CLGeocoder</span>!</div><div class="line"></div><div class="line"><span class="comment">// 初始化locationManager</span></div><div class="line">locationManager = <span class="type">CLLocationManager</span>()</div><div class="line">locationManager.delegate = <span class="keyword">self</span></div><div class="line">locationManager.desiredAccuracy = kCLLocationAccuracyBest <span class="comment">//定位精准度</span></div><div class="line">locationManager.distanceFilter = <span class="number">100</span> <span class="comment">// 超出范围更新位置信息</span></div><div class="line"><span class="keyword">if</span> <span class="type">Double</span>(<span class="type">UIDevice</span>.current.systemVersion)! &gt;= <span class="number">8.0</span> &#123;</div><div class="line">    locationManager.requestWhenInUseAuthorization() <span class="comment">// 使用期间</span></div><div class="line">&#125;</div><div class="line"><span class="comment">// 初始化geocoder</span></div><div class="line">geocoder = <span class="type">CLGeocoder</span>()</div></pre></td></tr></table></figure>
<h3 id="开始定位"><a href="#开始定位" class="headerlink" title="开始定位"></a>开始定位</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">locationManager.startUpdatingLocation()</div></pre></td></tr></table></figure>
<h3 id="添加代理并实现代理方法"><a href="#添加代理并实现代理方法" class="headerlink" title="添加代理并实现代理方法"></a>添加代理并实现代理方法</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"><span class="type">CLLocationManagerDelegate</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">locationManager</span><span class="params">(<span class="number">_</span> manager: CLLocationManager, didUpdateLocations locations: [CLLocation])</span></span> &#123;</div><div class="line">        <span class="built_in">print</span>(<span class="string">"每当请求到位置信息时都会调用此方法"</span>)</div><div class="line">        <span class="keyword">if</span> <span class="keyword">let</span> location = locations.first &#123; <span class="comment">// 坐标</span></div><div class="line">            <span class="built_in">print</span>(location)</div><div class="line">            geocoder.reverseGeocodeLocation(location) &#123; (placemarks, error) <span class="keyword">in</span></div><div class="line">                <span class="keyword">if</span> <span class="keyword">let</span> placemark = placemarks?.first &#123;</div><div class="line">                    <span class="built_in">print</span>(placemark.locality)</div><div class="line">                &#125; </div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">// 不需要定位的时候停止定位</span></div><div class="line">    manager.stopUpdatingLocation()</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">locationManager</span><span class="params">(<span class="number">_</span> manager: CLLocationManager, didFailWithError error: Error)</span></span> &#123;</div><div class="line">    <span class="built_in">print</span>(<span class="string">"定位失败: %@"</span>, error)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">locationManager</span><span class="params">(<span class="number">_</span> manager: CLLocationManager, didChangeAuthorization status: CLAuthorizationStatus)</span></span> &#123;</div><div class="line">    <span class="keyword">switch</span> status &#123;</div><div class="line">        <span class="keyword">case</span> .notDetermined:</div><div class="line">            <span class="built_in">print</span>(<span class="string">"用户未决定"</span>)</div><div class="line">        <span class="keyword">case</span> .restricted: <span class="comment">// 暂时没啥用</span></div><div class="line">            <span class="built_in">print</span>(<span class="string">"访问受限"</span>)</div><div class="line">        <span class="keyword">case</span> .denied: <span class="comment">// /定位关闭时和对此APP授权为never时调用</span></div><div class="line">            <span class="keyword">if</span> <span class="type">CLLocationManager</span>.locationServicesEnabled() &#123;</div><div class="line">                <span class="built_in">print</span>(<span class="string">"定位开启,但被拒绝"</span>)</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                <span class="built_in">print</span>(<span class="string">"定位关闭,不可用"</span>)</div><div class="line">            &#125;</div><div class="line">        <span class="keyword">case</span> .authorizedAlways:</div><div class="line">            <span class="built_in">print</span>(<span class="string">"获取前后台定位授权"</span>)</div><div class="line">        <span class="keyword">case</span> .authorizedWhenInUse:</div><div class="line">            <span class="built_in">print</span>(<span class="string">"获取前台定位授权"</span>)</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="为了提高用户体验-通常当检测到用户为打开定位功能的时候让用户便捷跳转到设置界面"><a href="#为了提高用户体验-通常当检测到用户为打开定位功能的时候让用户便捷跳转到设置界面" class="headerlink" title="为了提高用户体验,通常当检测到用户为打开定位功能的时候让用户便捷跳转到设置界面"></a>为了提高用户体验,通常当检测到用户为打开定位功能的时候让用户便捷跳转到设置界面</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> <span class="keyword">let</span> settingUrl = <span class="type">URL</span>(string: <span class="type">UIApplicationOpenSettingsURLString</span>) &#123;</div><div class="line">    <span class="keyword">if</span> <span class="type">UIApplication</span>.shared.canOpenURL(settingUrl) &amp;&amp; <span class="type">Double</span>(<span class="type">UIDevice</span>.current.systemVersion)! &gt;= <span class="number">8.0</span> &#123;</div><div class="line">        <span class="comment">//iOS8可直接跳转到设置界面</span></div><div class="line">        <span class="keyword">let</span> alertVC = <span class="type">UIAlertController</span>(title: <span class="string">"提示"</span>, message: <span class="string">"定位功能被拒绝，是否前往设置开启"</span>, preferredStyle: .alert)</div><div class="line">        <span class="keyword">let</span> cancelAction = <span class="type">UIAlertAction</span>(title: <span class="string">"取消"</span>, style: .cancel, handler: &#123; (action) <span class="keyword">in</span></div><div class="line">        &#125;)</div><div class="line">        <span class="keyword">let</span> okAction = <span class="type">UIAlertAction</span>(title: <span class="string">"确定"</span>, style: .<span class="keyword">default</span>, handler: &#123; (action) <span class="keyword">in</span></div><div class="line">        <span class="type">UIApplication</span>.shared.openURL(settingUrl)</div><div class="line">        &#125;)</div><div class="line">        alertVC.addAction(cancelAction)</div><div class="line">        alertVC.addAction(okAction)</div><div class="line">        <span class="keyword">let</span> vc = <span class="type">UIApplication</span>.shared.keyWindow?.rootViewController</div><div class="line">        vc?.present(alertVC, animated: <span class="literal">true</span>, completion: <span class="literal">nil</span>)</div><div class="line"></div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="keyword">let</span> alertVC = <span class="type">UIAlertController</span>(title: <span class="string">"提示"</span>, message: <span class="string">"定位服务未开启\n打开方式:设置-&gt;隐私-&gt;定位服务"</span>, preferredStyle: .alert)</div><div class="line">        <span class="keyword">let</span> cancelAction = <span class="type">UIAlertAction</span>(title: <span class="string">"确定"</span>, style: .cancel, handler: &#123; (action) <span class="keyword">in</span></div><div class="line">        &#125;)</div><div class="line">        alertVC.addAction(cancelAction)</div><div class="line">        <span class="keyword">let</span> vc = <span class="type">UIApplication</span>.shared.keyWindow?.rootViewController</div><div class="line">        vc?.present(alertVC, animated: <span class="literal">true</span>, completion: <span class="literal">nil</span>)</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><a href="https://github.com/xiaoxionglaoshi/DNLocationManager" target="_blank" rel="external">下载源码</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[系统声音服务的使用]]></title>
      <url>https://xiaoxionglaoshi.github.io/2016/10/07/%E7%B3%BB%E7%BB%9F%E5%A3%B0%E9%9F%B3%E6%9C%8D%E5%8A%A1%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
      <content type="html"><![CDATA[<p>系统声音服务(System Sound Services)提供了一个接口，用于播放不超过30秒的声音。它支持的文件格式有限，具体地说只有CAF、AIF和使用PCM或IMA/ADPCM数据的WAV文件。由于这些函数没有提供操纵声音和控制音量的功能，所以当你为多媒体或者游戏创建专门的配乐时，不要使用系统声音服务。</p>
<a id="more"></a>
<h3 id="系统声音服务的使用-播放声音-提醒-震动"><a href="#系统声音服务的使用-播放声音-提醒-震动" class="headerlink" title="系统声音服务的使用(播放声音,提醒,震动)"></a>系统声音服务的使用(播放声音,提醒,震动)</h3><h4 id="系统声音服务要求"><a href="#系统声音服务要求" class="headerlink" title="系统声音服务要求"></a>系统声音服务要求</h4><blockquote>
<p>1.系统声音播放不能超过30s<br>2.允许格式: CAF AIF 和使用PCM IMA/ADPCM数据的WAV文件</p>
</blockquote>
<h4 id="支持三种类型"><a href="#支持三种类型" class="headerlink" title="支持三种类型"></a>支持三种类型</h4><blockquote>
<p>1.声音: 立即播放一个简单声音,手机静音则什么声音都没有<br>2.提醒: 播放一个声音文件如果手机设为静音或震动，则通过震动提醒用户<br>3.震动: 震动手机，而不考虑其他设置</p>
</blockquote>
<h4 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项:"></a>注意事项:</h4><blockquote>
<p>导入音频文件之后,有时候会出现Bundle.main.path(forResource: sound, ofType: type) 这个方法获取不到资源的问题<br>原因: xcode没有自动将文件添加到你的资源文件中<br>解决: build Phases中的 copy Bundle Resources中点击”+”手动添加资源文件</p>
</blockquote>
<h4 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h4><h5 id="导入头文件"><a href="#导入头文件" class="headerlink" title="导入头文件"></a>导入头文件</h5><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> AudioToolbox</div></pre></td></tr></table></figure>
<h5 id="声音播放"><a href="#声音播放" class="headerlink" title="声音播放"></a>声音播放</h5><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">playAlertSound</span><span class="params">(sound: String, type: String)</span></span> &#123;</div><div class="line">    <span class="comment">// 建立sysytemSoundID对象</span></div><div class="line">    <span class="keyword">var</span> soundID: <span class="type">SystemSoundID</span> = <span class="number">0</span></div><div class="line">    <span class="comment">// 获取声音地址</span></div><div class="line">    <span class="keyword">guard</span> <span class="keyword">let</span> soundPath = <span class="type">Bundle</span>.main.path(forResource: sound, ofType: type) <span class="keyword">else</span> &#123; <span class="keyword">return</span> &#125;</div><div class="line">    <span class="keyword">guard</span> <span class="keyword">let</span> soundUrl = <span class="type">NSURL</span>(string: soundPath) <span class="keyword">else</span> &#123; <span class="keyword">return</span> &#125;</div><div class="line">    <span class="comment">// 赋值</span></div><div class="line">    <span class="type">AudioServicesCreateSystemSoundID</span>(soundUrl, &amp;soundID)</div><div class="line">    <span class="comment">// 播放声音</span></div><div class="line">    <span class="type">AudioServicesPlaySystemSound</span>(soundID)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h5 id="提醒"><a href="#提醒" class="headerlink" title="提醒"></a>提醒</h5><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">playSystemAlert</span><span class="params">(sound: String, type: String)</span></span> &#123;</div><div class="line">    <span class="comment">// 建立sysytemSoundID对象</span></div><div class="line">    <span class="keyword">var</span> soundID: <span class="type">SystemSoundID</span> = <span class="number">0</span></div><div class="line">    <span class="comment">// 获取声音地址</span></div><div class="line">    <span class="keyword">guard</span> <span class="keyword">let</span> soundPath = <span class="type">Bundle</span>.main.path(forResource: sound, ofType: type) <span class="keyword">else</span> &#123; <span class="keyword">return</span> &#125;</div><div class="line">    <span class="keyword">guard</span> <span class="keyword">let</span> soundUrl = <span class="type">NSURL</span>(string: soundPath) <span class="keyword">else</span> &#123; <span class="keyword">return</span> &#125;</div><div class="line">    <span class="comment">// 赋值</span></div><div class="line">    <span class="type">AudioServicesCreateSystemSoundID</span>(soundUrl, &amp;soundID)</div><div class="line">    <span class="comment">// 提醒（同播放声音唯一的一个区别）</span></div><div class="line">    <span class="type">AudioServicesPlayAlertSound</span>(soundID)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h5 id="震动"><a href="#震动" class="headerlink" title="震动"></a>震动</h5><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 建立的SystemSoundID对象</span></div><div class="line"><span class="keyword">let</span> soundID = <span class="type">SystemSoundID</span>(kSystemSoundID_Vibrate)</div><div class="line"><span class="comment">// 振动</span></div><div class="line"><span class="type">AudioServicesPlaySystemSound</span>(soundID)</div></pre></td></tr></table></figure>
<h5 id="防止出现重复点击声音覆盖"><a href="#防止出现重复点击声音覆盖" class="headerlink" title="防止出现重复点击声音覆盖"></a>防止出现重复点击声音覆盖</h5><blockquote>
<p>通常我们会在上一个声音播放完成之后才会调用下一次播放这里就会用到完成的回调方法 AudioServicesAddSystemSoundCompletion</p>
</blockquote>
<p>例:<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">playAlertSound</span><span class="params">(sound: String, type: String)</span></span> &#123;</div><div class="line">    <span class="keyword">if</span>  !isPlaying &#123;</div><div class="line">    isPlaying = <span class="literal">true</span></div><div class="line">    <span class="comment">// 建立sysytemSoundID对象</span></div><div class="line">    <span class="keyword">var</span> soundID: <span class="type">SystemSoundID</span> = <span class="number">0</span></div><div class="line">    <span class="comment">// 获取声音地址</span></div><div class="line">    <span class="keyword">guard</span> <span class="keyword">let</span> soundPath = <span class="type">Bundle</span>.main.path(forResource: sound, ofType: type) <span class="keyword">else</span> &#123; <span class="keyword">return</span> &#125;</div><div class="line">    <span class="keyword">guard</span> <span class="keyword">let</span> soundUrl = <span class="type">NSURL</span>(string: soundPath) <span class="keyword">else</span> &#123; <span class="keyword">return</span> &#125;</div><div class="line">    <span class="comment">// 赋值</span></div><div class="line">    <span class="type">AudioServicesCreateSystemSoundID</span>(soundUrl, &amp;soundID)</div><div class="line">    <span class="comment">// 播放声音</span></div><div class="line">    <span class="type">AudioServicesPlaySystemSound</span>(soundID)</div><div class="line"></div><div class="line">    <span class="comment">// 播放完成回调</span></div><div class="line">    <span class="keyword">let</span> pointer = <span class="type">Unmanaged</span>.passUnretained(<span class="keyword">self</span>).toOpaque()</div><div class="line">    <span class="type">AudioServicesAddSystemSoundCompletion</span>(soundID, <span class="literal">nil</span>, <span class="literal">nil</span>, &#123; (soundID, pointer) <span class="keyword">in</span></div><div class="line">        <span class="built_in">print</span>(<span class="string">"播放完成"</span>)</div><div class="line">        <span class="keyword">let</span> mySelf = <span class="type">Unmanaged</span>&lt;<span class="type">ViewController</span>&gt;.fromOpaque(pointer!).takeUnretainedValue()</div><div class="line">            mySelf.isPlaying = <span class="literal">false</span></div><div class="line">            <span class="type">AudioServicesRemoveSystemSoundCompletion</span>(soundID)</div><div class="line">            <span class="type">AudioServicesDisposeSystemSoundID</span>(soundID)</div><div class="line">        &#125;, pointer)</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><a href="https://github.com/xiaoxionglaoshi/DNPlayAlertSound/blob/master/README.md" target="_blank" rel="external">源码下载</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[指纹解锁]]></title>
      <url>https://xiaoxionglaoshi.github.io/2016/10/05/%E6%8C%87%E7%BA%B9%E8%A7%A3%E9%94%81/</url>
      <content type="html"><![CDATA[<p>指纹识别是从iPhone 5s开始支持的,在日常使用中,可以用来解锁手机和软件内部验证等用途,这里介绍的是在软件内部的使用,现在市面上应用的指纹解锁的应用还是很多的,尤其以金钱交易类的应用作为快捷登录和支付来使用,例如支付宝,招商银行等.</p>
<p>这里具体讲解一下如何使用指纹识别技术解锁应用<br><a id="more"></a></p>
<h3 id="添加依赖库-引用头文件"><a href="#添加依赖库-引用头文件" class="headerlink" title="添加依赖库 引用头文件"></a>添加依赖库 引用头文件</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="type">LocalAuthentication</span>.framework</div><div class="line"></div><div class="line"><span class="keyword">import</span> LocalAuthentication</div></pre></td></tr></table></figure>
<h3 id="实现指纹识别方法"><a href="#实现指纹识别方法" class="headerlink" title="实现指纹识别方法"></a>实现指纹识别方法</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">LocalAuthenticationLogin</span><span class="params">()</span></span> &#123;</div><div class="line">    <span class="comment">// 本地认证上下文联系对象</span></div><div class="line">    <span class="keyword">let</span> context = <span class="type">LAContext</span>()</div><div class="line">    <span class="keyword">var</span> error: <span class="type">NSError</span>?</div><div class="line"></div><div class="line">    <span class="comment">// 判断设备是否具备指纹认证功能</span></div><div class="line">    <span class="keyword">if</span> context.canEvaluatePolicy(.deviceOwnerAuthenticationWithBiometrics, error: &amp;error) &#123;</div><div class="line">        <span class="built_in">print</span>(<span class="string">"可以指纹识别了"</span>)</div><div class="line">        context.evaluatePolicy(.deviceOwnerAuthenticationWithBiometrics, localizedReason: <span class="string">"验证指纹以确认您的身份"</span>, reply: &#123; (success, error) <span class="keyword">in</span></div><div class="line">            <span class="keyword">if</span> success &#123;</div><div class="line">                <span class="built_in">print</span>(<span class="string">"指纹验证成功"</span>)</div><div class="line">                <span class="type">DispatchQueue</span>.main.async &#123;</div><div class="line">                <span class="comment">//更新UI 必须在主线程中更新,否则天知道要到猴年马月能执行</span></div><div class="line">            &#125;</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                <span class="built_in">print</span>(<span class="string">"指纹验证失败 错误原因:<span class="subst">\(error)</span>"</span>)</div><div class="line">                <span class="keyword">let</span> errorMessage = <span class="keyword">self</span>.errorMessageForError(aerror: error)</div><div class="line">                <span class="built_in">print</span>(errorMessage)</div><div class="line">            &#125;</div><div class="line">        &#125;)</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="keyword">let</span> errorMessage = <span class="keyword">self</span>.errorMessageForError(aerror: error)</div><div class="line">        <span class="built_in">print</span>(errorMessage)</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="归纳验证错误原因"><a href="#归纳验证错误原因" class="headerlink" title="归纳验证错误原因"></a>归纳验证错误原因</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">errorMessageForError</span><span class="params">(aerror: Error?)</span></span> -&gt; <span class="type">String</span> &#123;</div><div class="line">    <span class="keyword">var</span> errorMessage = <span class="string">""</span></div><div class="line">    <span class="keyword">if</span> <span class="keyword">let</span> error = aerror <span class="keyword">as</span>? <span class="type">NSError</span> &#123;</div><div class="line">        <span class="keyword">switch</span> error.code &#123;</div><div class="line">        <span class="keyword">case</span> <span class="type">LAError</span>.authenticationFailed.rawValue:</div><div class="line">        errorMessage = <span class="string">"身份验证不成功"</span></div><div class="line">        <span class="keyword">case</span> <span class="type">LAError</span>.userCancel.rawValue:</div><div class="line">        errorMessage = <span class="string">"手动取消验证"</span></div><div class="line">        <span class="keyword">case</span> <span class="type">LAError</span>.userFallback.rawValue:</div><div class="line">        errorMessage = <span class="string">"使用密码登录"</span></div><div class="line">        <span class="keyword">case</span> <span class="type">LAError</span>.systemCancel.rawValue:</div><div class="line">        errorMessage = <span class="string">"身份验证被系统取消"</span></div><div class="line">        <span class="keyword">case</span> <span class="type">LAError</span>.passcodeNotSet.rawValue:</div><div class="line">        errorMessage = <span class="string">"没有设置密码"</span></div><div class="line">        <span class="keyword">case</span> <span class="type">LAError</span>.touchIDNotAvailable.rawValue:</div><div class="line">        errorMessage = <span class="string">"设备不支持指纹"</span></div><div class="line">        <span class="keyword">case</span> <span class="type">LAError</span>.touchIDNotEnrolled.rawValue:</div><div class="line">        errorMessage = <span class="string">"没有登记的手指触摸ID"</span></div><div class="line">        <span class="keyword">default</span>:</div><div class="line">            errorMessage = <span class="string">""</span></div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> #available(iOS <span class="number">9.0</span>, *)&#123;</div><div class="line">            <span class="keyword">if</span> error.code == <span class="type">LAError</span>.touchIDLockout.rawValue &#123;</div><div class="line">                errorMessage = <span class="string">"TouchID被锁"</span></div><div class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> error.code == <span class="type">LAError</span>.appCancel.rawValue &#123;</div><div class="line">                errorMessage = <span class="string">"认证被取消应用程序"</span></div><div class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> error.code == <span class="type">LAError</span>.invalidContext.rawValue &#123;</div><div class="line">                errorMessage = <span class="string">"调用之前已经失效"</span></div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> errorMessage</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="当TouchID被锁"><a href="#当TouchID被锁" class="headerlink" title="当TouchID被锁"></a>当TouchID被锁</h3><blockquote>
<p>5次验证失败之后TouchID会被锁死,无法再调起指纹识别,这时候我们需要调起系统密码输入界面输入密码来重现验证指纹功能</p>
</blockquote>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@available</span>(iOS <span class="number">9.0</span>, *)</div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">alertSystemPasswordView</span><span class="params">()</span></span> &#123;</div><div class="line">    <span class="comment">// 本地认证上下文联系对象</span></div><div class="line">    <span class="keyword">let</span> context = <span class="type">LAContext</span>()</div><div class="line">    <span class="keyword">var</span> error: <span class="type">NSError</span>?</div><div class="line">    <span class="keyword">if</span> context.canEvaluatePolicy(.deviceOwnerAuthentication, error: &amp;error) &#123;</div><div class="line">        context.evaluatePolicy(.deviceOwnerAuthentication, localizedReason: <span class="string">"通过Home键验证已有手机指纹"</span>, reply: &#123; (success, error) <span class="keyword">in</span></div><div class="line">            <span class="keyword">if</span> success &#123;</div><div class="line">                <span class="built_in">print</span>(<span class="string">"重设成功"</span>)</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                <span class="built_in">print</span>(<span class="string">"重设失败"</span>)</div><div class="line">            &#125;</div><div class="line">        &#125;)</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><a href="https://github.com/xiaoxionglaoshi/DNLocalAuthentication" target="_blank" rel="external">源码下载</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[内购退款流程]]></title>
      <url>https://xiaoxionglaoshi.github.io/2016/10/03/%E5%86%85%E8%B4%AD%E9%80%80%E6%AC%BE%E6%B5%81%E7%A8%8B/</url>
      <content type="html"><![CDATA[<p>苹果提供购买后返回的流程,一般不管什么原因,90天内一般都能退款,下面介绍一下具体退款流程</p>
<a id="more"></a>
<h3 id="1-打开itunes"><a href="#1-打开itunes" class="headerlink" title="1.打开itunes"></a>1.打开itunes</h3><blockquote>
<p>手机连接电脑,打开itunes软件,在三个点中选择应用的选项</p>
</blockquote>
<p><img src="https://github.com/xiaoxionglaoshi/DNPurchasingIntroduce/blob/master/1.png?raw=true" alt="image"></p>
<h3 id="2-打开账号记录"><a href="#2-打开账号记录" class="headerlink" title="2.打开账号记录"></a>2.打开账号记录</h3><p><img src="https://github.com/xiaoxionglaoshi/DNPurchasingIntroduce/blob/master/2.png?raw=true" alt="image"></p>
<h3 id="3-选择购买历史记录"><a href="#3-选择购买历史记录" class="headerlink" title="3.选择购买历史记录"></a>3.选择购买历史记录</h3><p><img src="https://github.com/xiaoxionglaoshi/DNPurchasingIntroduce/blob/master/3.png?raw=true" alt="image"></p>
<h3 id="4-选择问题报告可查看订单号或者退款"><a href="#4-选择问题报告可查看订单号或者退款" class="headerlink" title="4.选择问题报告可查看订单号或者退款"></a>4.选择问题报告可查看订单号或者退款</h3><p><img src="https://github.com/xiaoxionglaoshi/DNPurchasingIntroduce/blob/master/4.png?raw=truehttp://note.youdao.com/favicon.ico" alt="image"></p>
<p>APP内购因为存在退款问题,而苹果没有实时的退款通知,也导致了很多刷单的情况,比如游戏中购买道具,通过充值-退款的反复操作刷道具,这也是做苹果内购最头疼的时,不过对于消费者来说还是不要随便刷单,一经发现有故意退款的情况,以后就很难再通过退款,这属于个人信用问题,不过,如果是正常的退款则没有影响</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[hexo建站]]></title>
      <url>https://xiaoxionglaoshi.github.io/2016/10/01/hexo%E5%BB%BA%E7%AB%99/</url>
      <content type="html"><![CDATA[<p><a href="https://hexo.io/zh-cn/" target="_blank" rel="external">hexo</a>可以方便的建立个人博客,托管在github上免费建立个人博客<br><a id="more"></a></p>
<h3 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h3><p>配置环境</p>
<p><a href="https://nodejs.org/en/" target="_blank" rel="external">Node.js</a></p>
<p><a href="https://git-scm.com/" target="_blank" rel="external">Git</a></p>
<p>安装后的显示</p>
<p><img src="https://github.com/xiaoxionglaoshi/Home/blob/master/img/a1.png?raw=true" alt="image"></p>
<p><img src="https://github.com/xiaoxionglaoshi/Home/blob/master/img/a2.png?raw=true" alt="image"></p>
<p>安装hexo<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm install -g hexo-cli</div></pre></td></tr></table></figure></p>
<p>给我们的Blog创建一个文件夹</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo init</div></pre></td></tr></table></figure>
<p>继续执行</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ hexo g</div><div class="line">$ hexo s --debug</div></pre></td></tr></table></figure>
<p>执行完后,在浏览器中打开 <a href="http://localhost:4000/" target="_blank" rel="external">http://localhost:4000/</a><br>显示默认主题<br><img src="https://github.com/xiaoxionglaoshi/Home/blob/master/img/a3.png?raw=true" alt="image"></p>
<h3 id="安装主题"><a href="#安装主题" class="headerlink" title="安装主题"></a>安装主题</h3><p>以NexT主题为例<br>下载</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git clone https://github.com/iissnan/hexo-theme-next themes/next</div></pre></td></tr></table></figure>
<p>启用 <a href="http://theme-next.iissnan.com/getting-started.html" target="_blank" rel="external">NexT</a> 主题</p>
<p>更新主题<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">cd themes/next</div><div class="line">$ git pull origin master</div></pre></td></tr></table></figure></p>
<p>打开站点配置文件_config.yml,找到theme,将landscape替换成next</p>
<p>执行</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ hexo clean</div><div class="line">$ hexo s --debug</div></pre></td></tr></table></figure>
<p>可以看到如下界面</p>
<p><img src="https://github.com/xiaoxionglaoshi/Home/blob/master/img/a4.png?raw=true" alt="image"></p>
<p>要部署到github上的时候执行</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ hexo clean</div><div class="line">$ hexo g</div><div class="line">$ hexo d</div></pre></td></tr></table></figure>
<p>有时候会出现错误</p>
<blockquote>
<p>ERROR Deployer not found: git</p>
</blockquote>
<p>这时候我们需要执行</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm install hexo-deployer-git --save</div></pre></td></tr></table></figure>
<p>然后在重新执行部署到github的操作</p>
<p>更多样式配置可查看 <a href="http://ehlxr.me/2016/08/30/%E4%BD%BF%E7%94%A8Hexo%E5%9F%BA%E4%BA%8EGitHub-Pages%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%EF%BC%88%E4%B8%89%EF%BC%89/" target="_blank" rel="external">这里</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[定律,定理,定则,公理,原理区别]]></title>
      <url>https://xiaoxionglaoshi.github.io/2016/10/01/%E5%AE%9A%E5%BE%8B-%E5%AE%9A%E7%90%86-%E5%AE%9A%E5%88%99-%E5%85%AC%E7%90%86-%E5%8E%9F%E7%90%86%E5%8C%BA%E5%88%AB/</url>
      <content type="html"><![CDATA[<h3 id="定律"><a href="#定律" class="headerlink" title="定律"></a>定律</h3><blockquote>
<p>定律是为实践和事实所证明，反映事物在一定条件下发展变化的客观规律的论断。例如牛顿运动定律、能量守恒定律、欧姆定律等。<br>定律是一种理论模型，它用以描述特定情况、特定尺度下的现实世界，在其它尺度下可能会失效或者不准确。没有任何一种理论可以描述宇宙当中的所有情况，也没有任何一种理论可能完全正确。</p>
</blockquote>
<a id="more"></a>
<h3 id="定理"><a href="#定理" class="headerlink" title="定理"></a>定理</h3><blockquote>
<p>已经证明具有正确性、可以作为原则或规律的命题或公式，如几何定理。定理是从真命题（公理或其他已被证明的定理）出发，经过受逻辑限制的演绎推导，证明为正确的结论，即另一个真命题。例如“平行四边形的对边相等”就是平面几何中的一个定理。一般来说，在数学中，只有重要或有趣的陈述才叫定理。证明定理是数学的中心活动。相信为真但未被证明的数学叙述为猜想，当它被证明为真后便是定理。它是定理的来源，但并非唯一来源。一个从其他定理引伸出来的数学叙述，可以不经过证明成为猜想的过程，成为定理。定理已经证明具有正确性、可作为原则或规律的命题或公式。例如：“平行四边形对边相等”就是儿何学中的一个定理。</p>
</blockquote>
<h3 id="定则"><a href="#定则" class="headerlink" title="定则"></a>定则</h3><blockquote>
<p>公认的一种用以表达事物间内在联系的力一法，其目的是帮助理解及记忆。最常见的如右手定则，左手定则，安培螺旋法则等。</p>
</blockquote>
<h3 id="公理"><a href="#公理" class="headerlink" title="公理"></a>公理</h3><blockquote>
<p>经过人类长期反复的实践检验是真实的，不需要由其他判断加以证明的命题和原理。即目前大家都认可的，一定成立的命题。如传统形式逻辑三段论关于一类事物的全部是什么或不是什么，那么这类事物中的部分也是什么或不是什么，也即如果对一类事物的全部有所断定，那么对它的部分也就有所断定，便是公理。又如日常生活中人们所使用的“有生必有死”，”平面内过两点的直线有且只有一条。”也属于这种不证自明的判断。</p>
</blockquote>
<h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><blockquote>
<p>自然科学和社会科学中具有普遍意义的基本规律。是在大量观察、实践的基础上，经过归纳、概括而得出的。既能指导实践，又必须经受实践的检验。<br>换句话说，指文字原来的理由,最基础,最根本的理论，或指某一领域或学科中带有普遍性的、最基本的、可以作为其他规律的基础的规律。</p>
</blockquote>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Hello World]]></title>
      <url>https://xiaoxionglaoshi.github.io/2016/10/01/Hello-World/</url>
      <content type="html"><![CDATA[<p>最近闲的蛋疼,开个博客玩玩.</p>
<a id="more"></a>
<h3 id="这个博客是干什么的"><a href="#这个博客是干什么的" class="headerlink" title="这个博客是干什么的"></a>这个博客是干什么的</h3><blockquote>
<p>其实主要是记录一下在开发过程中总结一些经验,和遇到的一些问题,到时候回头忘掉了还可以在翻翻看,同时也督促自己每天梳理一下知识点,省的闲的没事干什么都忘了,这里有自己的总结,也有看到别人写的好的代码总结,反正就是总结</p>
</blockquote>
<h3 id="为什么开通这个博客"><a href="#为什么开通这个博客" class="headerlink" title="为什么开通这个博客"></a>为什么开通这个博客</h3><blockquote>
<p>好多分享平台都不错,之前在CSDN,简书等都开过博客,我为什么还要再费时费力的自己搭建博客呢,就一个原因,我想起的名字各个平台基本上都被占用的,在这里,我爱起什么名字就起什么名字,就是这么任性.</p>
</blockquote>
<h3 id="怎么对待这个博客"><a href="#怎么对待这个博客" class="headerlink" title="怎么对待这个博客"></a>怎么对待这个博客</h3><blockquote>
<p>争取每天都能分享一点,只要有意义的都可以,日积月累就会有更多的内容值得自己去回味反思.</p>
</blockquote>
<h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><blockquote>
<p>本博客是搭建在GitHub上的,域名也是原始域名,没有钱买域名了😭, 就这样吧,有些内容里面的链接什么的可能需要<a href="https://github.com/getlantern/lantern" target="_blank" rel="external">科学上网</a>才能访问,这个相信生活在天朝的人们都会的</p>
</blockquote>
]]></content>
    </entry>
    
  
  
</search>
